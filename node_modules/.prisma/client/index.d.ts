
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Business
 * 
 */
export type Business = $Result.DefaultSelection<Prisma.$BusinessPayload>
/**
 * Model BusinessDocument
 * 
 */
export type BusinessDocument = $Result.DefaultSelection<Prisma.$BusinessDocumentPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  WORKER: 'WORKER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.business`: Exposes CRUD operations for the **Business** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Businesses
    * const businesses = await prisma.business.findMany()
    * ```
    */
  get business(): Prisma.BusinessDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.businessDocument`: Exposes CRUD operations for the **BusinessDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BusinessDocuments
    * const businessDocuments = await prisma.businessDocument.findMany()
    * ```
    */
  get businessDocument(): Prisma.BusinessDocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Category: 'Category',
    Business: 'Business',
    BusinessDocument: 'BusinessDocument',
    AuditLog: 'AuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "category" | "business" | "businessDocument" | "auditLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Business: {
        payload: Prisma.$BusinessPayload<ExtArgs>
        fields: Prisma.BusinessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BusinessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BusinessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>
          }
          findFirst: {
            args: Prisma.BusinessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BusinessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>
          }
          findMany: {
            args: Prisma.BusinessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>[]
          }
          create: {
            args: Prisma.BusinessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>
          }
          createMany: {
            args: Prisma.BusinessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BusinessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>[]
          }
          delete: {
            args: Prisma.BusinessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>
          }
          update: {
            args: Prisma.BusinessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>
          }
          deleteMany: {
            args: Prisma.BusinessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BusinessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BusinessUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>[]
          }
          upsert: {
            args: Prisma.BusinessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>
          }
          aggregate: {
            args: Prisma.BusinessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBusiness>
          }
          groupBy: {
            args: Prisma.BusinessGroupByArgs<ExtArgs>
            result: $Utils.Optional<BusinessGroupByOutputType>[]
          }
          count: {
            args: Prisma.BusinessCountArgs<ExtArgs>
            result: $Utils.Optional<BusinessCountAggregateOutputType> | number
          }
        }
      }
      BusinessDocument: {
        payload: Prisma.$BusinessDocumentPayload<ExtArgs>
        fields: Prisma.BusinessDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BusinessDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BusinessDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessDocumentPayload>
          }
          findFirst: {
            args: Prisma.BusinessDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BusinessDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessDocumentPayload>
          }
          findMany: {
            args: Prisma.BusinessDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessDocumentPayload>[]
          }
          create: {
            args: Prisma.BusinessDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessDocumentPayload>
          }
          createMany: {
            args: Prisma.BusinessDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BusinessDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessDocumentPayload>[]
          }
          delete: {
            args: Prisma.BusinessDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessDocumentPayload>
          }
          update: {
            args: Prisma.BusinessDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessDocumentPayload>
          }
          deleteMany: {
            args: Prisma.BusinessDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BusinessDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BusinessDocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessDocumentPayload>[]
          }
          upsert: {
            args: Prisma.BusinessDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessDocumentPayload>
          }
          aggregate: {
            args: Prisma.BusinessDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBusinessDocument>
          }
          groupBy: {
            args: Prisma.BusinessDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<BusinessDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.BusinessDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<BusinessDocumentCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    category?: CategoryOmit
    business?: BusinessOmit
    businessDocument?: BusinessDocumentOmit
    auditLog?: AuditLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    businesses: number
    auditLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businesses?: boolean | UserCountOutputTypeCountBusinessesArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBusinessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    businesses: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businesses?: boolean | CategoryCountOutputTypeCountBusinessesArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountBusinessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessWhereInput
  }


  /**
   * Count Type BusinessCountOutputType
   */

  export type BusinessCountOutputType = {
    documents: number
    auditLogs: number
  }

  export type BusinessCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | BusinessCountOutputTypeCountDocumentsArgs
    auditLogs?: boolean | BusinessCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * BusinessCountOutputType without action
   */
  export type BusinessCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessCountOutputType
     */
    select?: BusinessCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BusinessCountOutputType without action
   */
  export type BusinessCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessDocumentWhereInput
  }

  /**
   * BusinessCountOutputType without action
   */
  export type BusinessCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    fullName: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    fullName: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    role: number
    fullName: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role?: true
    fullName?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role?: true
    fullName?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role?: true
    fullName?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    email: string | null
    password: string
    role: $Enums.UserRole
    fullName: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    fullName?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    businesses?: boolean | User$businessesArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    fullName?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    fullName?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    fullName?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "email" | "password" | "role" | "fullName" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businesses?: boolean | User$businessesArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      businesses: Prisma.$BusinessPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      email: string | null
      password: string
      role: $Enums.UserRole
      fullName: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    businesses<T extends User$businessesArgs<ExtArgs> = {}>(args?: Subset<T, User$businessesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.businesses
   */
  export type User$businessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Business
     */
    omit?: BusinessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    where?: BusinessWhereInput
    orderBy?: BusinessOrderByWithRelationInput | BusinessOrderByWithRelationInput[]
    cursor?: BusinessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessScalarFieldEnum | BusinessScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    nameEnglish: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    nameEnglish: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    nameEnglish: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    nameEnglish?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    nameEnglish?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    nameEnglish?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    nameEnglish: string | null
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    nameEnglish?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    businesses?: boolean | Category$businessesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    nameEnglish?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    nameEnglish?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    nameEnglish?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "nameEnglish" | "description" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businesses?: boolean | Category$businessesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      businesses: Prisma.$BusinessPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      nameEnglish: string | null
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    businesses<T extends Category$businessesArgs<ExtArgs> = {}>(args?: Subset<T, Category$businessesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly nameEnglish: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly isActive: FieldRef<"Category", 'Boolean'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category updateManyAndReturn
   */
  export type CategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.businesses
   */
  export type Category$businessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Business
     */
    omit?: BusinessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    where?: BusinessWhereInput
    orderBy?: BusinessOrderByWithRelationInput | BusinessOrderByWithRelationInput[]
    cursor?: BusinessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessScalarFieldEnum | BusinessScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Business
   */

  export type AggregateBusiness = {
    _count: BusinessCountAggregateOutputType | null
    _avg: BusinessAvgAggregateOutputType | null
    _sum: BusinessSumAggregateOutputType | null
    _min: BusinessMinAggregateOutputType | null
    _max: BusinessMaxAggregateOutputType | null
  }

  export type BusinessAvgAggregateOutputType = {
    wardNumber: number | null
    totalInvestment: number | null
    annualTurnover: number | null
    permanentEmployees: number | null
    femaleEmployees: number | null
    temporaryContractEmployees: number | null
    marginalizedEmployees: number | null
    partTimeFreelancers: number | null
    avgSalary: number | null
    avgIncome: number | null
    avgExpense: number | null
    loanAmount: number | null
  }

  export type BusinessSumAggregateOutputType = {
    wardNumber: number | null
    totalInvestment: number | null
    annualTurnover: number | null
    permanentEmployees: number | null
    femaleEmployees: number | null
    temporaryContractEmployees: number | null
    marginalizedEmployees: number | null
    partTimeFreelancers: number | null
    avgSalary: number | null
    avgIncome: number | null
    avgExpense: number | null
    loanAmount: number | null
  }

  export type BusinessMinAggregateOutputType = {
    id: string | null
    businessName: string | null
    contactPerson: string | null
    position: string | null
    businessAddress: string | null
    contactNumber: string | null
    email: string | null
    tole: string | null
    wardNumber: number | null
    municipality: string | null
    establishmentYear: string | null
    ownershipType: string | null
    businessType: string | null
    businessField: string | null
    totalInvestment: number | null
    locationOwnership: string | null
    annualTurnover: number | null
    registrationNumber: string | null
    vatNumber: string | null
    laborPermit: string | null
    panNumber: string | null
    environmentApproval: string | null
    otherPermits: string | null
    permanentEmployees: number | null
    femaleEmployees: number | null
    temporaryContractEmployees: number | null
    marginalizedEmployees: number | null
    partTimeFreelancers: number | null
    avgSalary: number | null
    incomeSource: string | null
    avgIncome: number | null
    avgExpense: number | null
    loanProvider: string | null
    loanAmount: number | null
    loanDuration: string | null
    expansionPlans: string | null
    mainChallenges: string | null
    municipalSupport: string | null
    communityContribution: string | null
    additionalSupport: string | null
    formFilledDate: string | null
    finalRemarks: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    categoryId: string | null
    createdById: string | null
  }

  export type BusinessMaxAggregateOutputType = {
    id: string | null
    businessName: string | null
    contactPerson: string | null
    position: string | null
    businessAddress: string | null
    contactNumber: string | null
    email: string | null
    tole: string | null
    wardNumber: number | null
    municipality: string | null
    establishmentYear: string | null
    ownershipType: string | null
    businessType: string | null
    businessField: string | null
    totalInvestment: number | null
    locationOwnership: string | null
    annualTurnover: number | null
    registrationNumber: string | null
    vatNumber: string | null
    laborPermit: string | null
    panNumber: string | null
    environmentApproval: string | null
    otherPermits: string | null
    permanentEmployees: number | null
    femaleEmployees: number | null
    temporaryContractEmployees: number | null
    marginalizedEmployees: number | null
    partTimeFreelancers: number | null
    avgSalary: number | null
    incomeSource: string | null
    avgIncome: number | null
    avgExpense: number | null
    loanProvider: string | null
    loanAmount: number | null
    loanDuration: string | null
    expansionPlans: string | null
    mainChallenges: string | null
    municipalSupport: string | null
    communityContribution: string | null
    additionalSupport: string | null
    formFilledDate: string | null
    finalRemarks: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    categoryId: string | null
    createdById: string | null
  }

  export type BusinessCountAggregateOutputType = {
    id: number
    businessName: number
    contactPerson: number
    position: number
    businessAddress: number
    contactNumber: number
    email: number
    tole: number
    wardNumber: number
    municipality: number
    establishmentYear: number
    ownershipType: number
    businessType: number
    businessField: number
    totalInvestment: number
    locationOwnership: number
    annualTurnover: number
    registrationNumber: number
    vatNumber: number
    laborPermit: number
    panNumber: number
    environmentApproval: number
    otherPermits: number
    permanentEmployees: number
    femaleEmployees: number
    temporaryContractEmployees: number
    marginalizedEmployees: number
    partTimeFreelancers: number
    avgSalary: number
    incomeSource: number
    avgIncome: number
    avgExpense: number
    loanProvider: number
    loanAmount: number
    loanDuration: number
    expansionPlans: number
    mainChallenges: number
    municipalSupport: number
    communityContribution: number
    additionalSupport: number
    formFilledDate: number
    finalRemarks: number
    isActive: number
    createdAt: number
    updatedAt: number
    categoryId: number
    createdById: number
    _all: number
  }


  export type BusinessAvgAggregateInputType = {
    wardNumber?: true
    totalInvestment?: true
    annualTurnover?: true
    permanentEmployees?: true
    femaleEmployees?: true
    temporaryContractEmployees?: true
    marginalizedEmployees?: true
    partTimeFreelancers?: true
    avgSalary?: true
    avgIncome?: true
    avgExpense?: true
    loanAmount?: true
  }

  export type BusinessSumAggregateInputType = {
    wardNumber?: true
    totalInvestment?: true
    annualTurnover?: true
    permanentEmployees?: true
    femaleEmployees?: true
    temporaryContractEmployees?: true
    marginalizedEmployees?: true
    partTimeFreelancers?: true
    avgSalary?: true
    avgIncome?: true
    avgExpense?: true
    loanAmount?: true
  }

  export type BusinessMinAggregateInputType = {
    id?: true
    businessName?: true
    contactPerson?: true
    position?: true
    businessAddress?: true
    contactNumber?: true
    email?: true
    tole?: true
    wardNumber?: true
    municipality?: true
    establishmentYear?: true
    ownershipType?: true
    businessType?: true
    businessField?: true
    totalInvestment?: true
    locationOwnership?: true
    annualTurnover?: true
    registrationNumber?: true
    vatNumber?: true
    laborPermit?: true
    panNumber?: true
    environmentApproval?: true
    otherPermits?: true
    permanentEmployees?: true
    femaleEmployees?: true
    temporaryContractEmployees?: true
    marginalizedEmployees?: true
    partTimeFreelancers?: true
    avgSalary?: true
    incomeSource?: true
    avgIncome?: true
    avgExpense?: true
    loanProvider?: true
    loanAmount?: true
    loanDuration?: true
    expansionPlans?: true
    mainChallenges?: true
    municipalSupport?: true
    communityContribution?: true
    additionalSupport?: true
    formFilledDate?: true
    finalRemarks?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    categoryId?: true
    createdById?: true
  }

  export type BusinessMaxAggregateInputType = {
    id?: true
    businessName?: true
    contactPerson?: true
    position?: true
    businessAddress?: true
    contactNumber?: true
    email?: true
    tole?: true
    wardNumber?: true
    municipality?: true
    establishmentYear?: true
    ownershipType?: true
    businessType?: true
    businessField?: true
    totalInvestment?: true
    locationOwnership?: true
    annualTurnover?: true
    registrationNumber?: true
    vatNumber?: true
    laborPermit?: true
    panNumber?: true
    environmentApproval?: true
    otherPermits?: true
    permanentEmployees?: true
    femaleEmployees?: true
    temporaryContractEmployees?: true
    marginalizedEmployees?: true
    partTimeFreelancers?: true
    avgSalary?: true
    incomeSource?: true
    avgIncome?: true
    avgExpense?: true
    loanProvider?: true
    loanAmount?: true
    loanDuration?: true
    expansionPlans?: true
    mainChallenges?: true
    municipalSupport?: true
    communityContribution?: true
    additionalSupport?: true
    formFilledDate?: true
    finalRemarks?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    categoryId?: true
    createdById?: true
  }

  export type BusinessCountAggregateInputType = {
    id?: true
    businessName?: true
    contactPerson?: true
    position?: true
    businessAddress?: true
    contactNumber?: true
    email?: true
    tole?: true
    wardNumber?: true
    municipality?: true
    establishmentYear?: true
    ownershipType?: true
    businessType?: true
    businessField?: true
    totalInvestment?: true
    locationOwnership?: true
    annualTurnover?: true
    registrationNumber?: true
    vatNumber?: true
    laborPermit?: true
    panNumber?: true
    environmentApproval?: true
    otherPermits?: true
    permanentEmployees?: true
    femaleEmployees?: true
    temporaryContractEmployees?: true
    marginalizedEmployees?: true
    partTimeFreelancers?: true
    avgSalary?: true
    incomeSource?: true
    avgIncome?: true
    avgExpense?: true
    loanProvider?: true
    loanAmount?: true
    loanDuration?: true
    expansionPlans?: true
    mainChallenges?: true
    municipalSupport?: true
    communityContribution?: true
    additionalSupport?: true
    formFilledDate?: true
    finalRemarks?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    categoryId?: true
    createdById?: true
    _all?: true
  }

  export type BusinessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Business to aggregate.
     */
    where?: BusinessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Businesses to fetch.
     */
    orderBy?: BusinessOrderByWithRelationInput | BusinessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BusinessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Businesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Businesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Businesses
    **/
    _count?: true | BusinessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BusinessAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BusinessSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BusinessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BusinessMaxAggregateInputType
  }

  export type GetBusinessAggregateType<T extends BusinessAggregateArgs> = {
        [P in keyof T & keyof AggregateBusiness]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBusiness[P]>
      : GetScalarType<T[P], AggregateBusiness[P]>
  }




  export type BusinessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessWhereInput
    orderBy?: BusinessOrderByWithAggregationInput | BusinessOrderByWithAggregationInput[]
    by: BusinessScalarFieldEnum[] | BusinessScalarFieldEnum
    having?: BusinessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BusinessCountAggregateInputType | true
    _avg?: BusinessAvgAggregateInputType
    _sum?: BusinessSumAggregateInputType
    _min?: BusinessMinAggregateInputType
    _max?: BusinessMaxAggregateInputType
  }

  export type BusinessGroupByOutputType = {
    id: string
    businessName: string
    contactPerson: string
    position: string | null
    businessAddress: string
    contactNumber: string
    email: string | null
    tole: string | null
    wardNumber: number
    municipality: string | null
    establishmentYear: string | null
    ownershipType: string | null
    businessType: string | null
    businessField: string | null
    totalInvestment: number | null
    locationOwnership: string | null
    annualTurnover: number | null
    registrationNumber: string | null
    vatNumber: string | null
    laborPermit: string | null
    panNumber: string | null
    environmentApproval: string | null
    otherPermits: string | null
    permanentEmployees: number | null
    femaleEmployees: number | null
    temporaryContractEmployees: number | null
    marginalizedEmployees: number | null
    partTimeFreelancers: number | null
    avgSalary: number | null
    incomeSource: string | null
    avgIncome: number | null
    avgExpense: number | null
    loanProvider: string | null
    loanAmount: number | null
    loanDuration: string | null
    expansionPlans: string | null
    mainChallenges: string | null
    municipalSupport: string | null
    communityContribution: string | null
    additionalSupport: string | null
    formFilledDate: string | null
    finalRemarks: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    categoryId: string | null
    createdById: string
    _count: BusinessCountAggregateOutputType | null
    _avg: BusinessAvgAggregateOutputType | null
    _sum: BusinessSumAggregateOutputType | null
    _min: BusinessMinAggregateOutputType | null
    _max: BusinessMaxAggregateOutputType | null
  }

  type GetBusinessGroupByPayload<T extends BusinessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BusinessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BusinessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BusinessGroupByOutputType[P]>
            : GetScalarType<T[P], BusinessGroupByOutputType[P]>
        }
      >
    >


  export type BusinessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    businessName?: boolean
    contactPerson?: boolean
    position?: boolean
    businessAddress?: boolean
    contactNumber?: boolean
    email?: boolean
    tole?: boolean
    wardNumber?: boolean
    municipality?: boolean
    establishmentYear?: boolean
    ownershipType?: boolean
    businessType?: boolean
    businessField?: boolean
    totalInvestment?: boolean
    locationOwnership?: boolean
    annualTurnover?: boolean
    registrationNumber?: boolean
    vatNumber?: boolean
    laborPermit?: boolean
    panNumber?: boolean
    environmentApproval?: boolean
    otherPermits?: boolean
    permanentEmployees?: boolean
    femaleEmployees?: boolean
    temporaryContractEmployees?: boolean
    marginalizedEmployees?: boolean
    partTimeFreelancers?: boolean
    avgSalary?: boolean
    incomeSource?: boolean
    avgIncome?: boolean
    avgExpense?: boolean
    loanProvider?: boolean
    loanAmount?: boolean
    loanDuration?: boolean
    expansionPlans?: boolean
    mainChallenges?: boolean
    municipalSupport?: boolean
    communityContribution?: boolean
    additionalSupport?: boolean
    formFilledDate?: boolean
    finalRemarks?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryId?: boolean
    createdById?: boolean
    category?: boolean | Business$categoryArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    documents?: boolean | Business$documentsArgs<ExtArgs>
    auditLogs?: boolean | Business$auditLogsArgs<ExtArgs>
    _count?: boolean | BusinessCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["business"]>

  export type BusinessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    businessName?: boolean
    contactPerson?: boolean
    position?: boolean
    businessAddress?: boolean
    contactNumber?: boolean
    email?: boolean
    tole?: boolean
    wardNumber?: boolean
    municipality?: boolean
    establishmentYear?: boolean
    ownershipType?: boolean
    businessType?: boolean
    businessField?: boolean
    totalInvestment?: boolean
    locationOwnership?: boolean
    annualTurnover?: boolean
    registrationNumber?: boolean
    vatNumber?: boolean
    laborPermit?: boolean
    panNumber?: boolean
    environmentApproval?: boolean
    otherPermits?: boolean
    permanentEmployees?: boolean
    femaleEmployees?: boolean
    temporaryContractEmployees?: boolean
    marginalizedEmployees?: boolean
    partTimeFreelancers?: boolean
    avgSalary?: boolean
    incomeSource?: boolean
    avgIncome?: boolean
    avgExpense?: boolean
    loanProvider?: boolean
    loanAmount?: boolean
    loanDuration?: boolean
    expansionPlans?: boolean
    mainChallenges?: boolean
    municipalSupport?: boolean
    communityContribution?: boolean
    additionalSupport?: boolean
    formFilledDate?: boolean
    finalRemarks?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryId?: boolean
    createdById?: boolean
    category?: boolean | Business$categoryArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["business"]>

  export type BusinessSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    businessName?: boolean
    contactPerson?: boolean
    position?: boolean
    businessAddress?: boolean
    contactNumber?: boolean
    email?: boolean
    tole?: boolean
    wardNumber?: boolean
    municipality?: boolean
    establishmentYear?: boolean
    ownershipType?: boolean
    businessType?: boolean
    businessField?: boolean
    totalInvestment?: boolean
    locationOwnership?: boolean
    annualTurnover?: boolean
    registrationNumber?: boolean
    vatNumber?: boolean
    laborPermit?: boolean
    panNumber?: boolean
    environmentApproval?: boolean
    otherPermits?: boolean
    permanentEmployees?: boolean
    femaleEmployees?: boolean
    temporaryContractEmployees?: boolean
    marginalizedEmployees?: boolean
    partTimeFreelancers?: boolean
    avgSalary?: boolean
    incomeSource?: boolean
    avgIncome?: boolean
    avgExpense?: boolean
    loanProvider?: boolean
    loanAmount?: boolean
    loanDuration?: boolean
    expansionPlans?: boolean
    mainChallenges?: boolean
    municipalSupport?: boolean
    communityContribution?: boolean
    additionalSupport?: boolean
    formFilledDate?: boolean
    finalRemarks?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryId?: boolean
    createdById?: boolean
    category?: boolean | Business$categoryArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["business"]>

  export type BusinessSelectScalar = {
    id?: boolean
    businessName?: boolean
    contactPerson?: boolean
    position?: boolean
    businessAddress?: boolean
    contactNumber?: boolean
    email?: boolean
    tole?: boolean
    wardNumber?: boolean
    municipality?: boolean
    establishmentYear?: boolean
    ownershipType?: boolean
    businessType?: boolean
    businessField?: boolean
    totalInvestment?: boolean
    locationOwnership?: boolean
    annualTurnover?: boolean
    registrationNumber?: boolean
    vatNumber?: boolean
    laborPermit?: boolean
    panNumber?: boolean
    environmentApproval?: boolean
    otherPermits?: boolean
    permanentEmployees?: boolean
    femaleEmployees?: boolean
    temporaryContractEmployees?: boolean
    marginalizedEmployees?: boolean
    partTimeFreelancers?: boolean
    avgSalary?: boolean
    incomeSource?: boolean
    avgIncome?: boolean
    avgExpense?: boolean
    loanProvider?: boolean
    loanAmount?: boolean
    loanDuration?: boolean
    expansionPlans?: boolean
    mainChallenges?: boolean
    municipalSupport?: boolean
    communityContribution?: boolean
    additionalSupport?: boolean
    formFilledDate?: boolean
    finalRemarks?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryId?: boolean
    createdById?: boolean
  }

  export type BusinessOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "businessName" | "contactPerson" | "position" | "businessAddress" | "contactNumber" | "email" | "tole" | "wardNumber" | "municipality" | "establishmentYear" | "ownershipType" | "businessType" | "businessField" | "totalInvestment" | "locationOwnership" | "annualTurnover" | "registrationNumber" | "vatNumber" | "laborPermit" | "panNumber" | "environmentApproval" | "otherPermits" | "permanentEmployees" | "femaleEmployees" | "temporaryContractEmployees" | "marginalizedEmployees" | "partTimeFreelancers" | "avgSalary" | "incomeSource" | "avgIncome" | "avgExpense" | "loanProvider" | "loanAmount" | "loanDuration" | "expansionPlans" | "mainChallenges" | "municipalSupport" | "communityContribution" | "additionalSupport" | "formFilledDate" | "finalRemarks" | "isActive" | "createdAt" | "updatedAt" | "categoryId" | "createdById", ExtArgs["result"]["business"]>
  export type BusinessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | Business$categoryArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    documents?: boolean | Business$documentsArgs<ExtArgs>
    auditLogs?: boolean | Business$auditLogsArgs<ExtArgs>
    _count?: boolean | BusinessCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BusinessIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | Business$categoryArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BusinessIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | Business$categoryArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BusinessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Business"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs>
      documents: Prisma.$BusinessDocumentPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      businessName: string
      contactPerson: string
      position: string | null
      businessAddress: string
      contactNumber: string
      email: string | null
      tole: string | null
      wardNumber: number
      municipality: string | null
      establishmentYear: string | null
      ownershipType: string | null
      businessType: string | null
      businessField: string | null
      totalInvestment: number | null
      locationOwnership: string | null
      annualTurnover: number | null
      registrationNumber: string | null
      vatNumber: string | null
      laborPermit: string | null
      panNumber: string | null
      environmentApproval: string | null
      otherPermits: string | null
      permanentEmployees: number | null
      femaleEmployees: number | null
      temporaryContractEmployees: number | null
      marginalizedEmployees: number | null
      partTimeFreelancers: number | null
      avgSalary: number | null
      incomeSource: string | null
      avgIncome: number | null
      avgExpense: number | null
      loanProvider: string | null
      loanAmount: number | null
      loanDuration: string | null
      expansionPlans: string | null
      mainChallenges: string | null
      municipalSupport: string | null
      communityContribution: string | null
      additionalSupport: string | null
      formFilledDate: string | null
      finalRemarks: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      categoryId: string | null
      createdById: string
    }, ExtArgs["result"]["business"]>
    composites: {}
  }

  type BusinessGetPayload<S extends boolean | null | undefined | BusinessDefaultArgs> = $Result.GetResult<Prisma.$BusinessPayload, S>

  type BusinessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BusinessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BusinessCountAggregateInputType | true
    }

  export interface BusinessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Business'], meta: { name: 'Business' } }
    /**
     * Find zero or one Business that matches the filter.
     * @param {BusinessFindUniqueArgs} args - Arguments to find a Business
     * @example
     * // Get one Business
     * const business = await prisma.business.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BusinessFindUniqueArgs>(args: SelectSubset<T, BusinessFindUniqueArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Business that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BusinessFindUniqueOrThrowArgs} args - Arguments to find a Business
     * @example
     * // Get one Business
     * const business = await prisma.business.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BusinessFindUniqueOrThrowArgs>(args: SelectSubset<T, BusinessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Business that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessFindFirstArgs} args - Arguments to find a Business
     * @example
     * // Get one Business
     * const business = await prisma.business.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BusinessFindFirstArgs>(args?: SelectSubset<T, BusinessFindFirstArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Business that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessFindFirstOrThrowArgs} args - Arguments to find a Business
     * @example
     * // Get one Business
     * const business = await prisma.business.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BusinessFindFirstOrThrowArgs>(args?: SelectSubset<T, BusinessFindFirstOrThrowArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Businesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Businesses
     * const businesses = await prisma.business.findMany()
     * 
     * // Get first 10 Businesses
     * const businesses = await prisma.business.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const businessWithIdOnly = await prisma.business.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BusinessFindManyArgs>(args?: SelectSubset<T, BusinessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Business.
     * @param {BusinessCreateArgs} args - Arguments to create a Business.
     * @example
     * // Create one Business
     * const Business = await prisma.business.create({
     *   data: {
     *     // ... data to create a Business
     *   }
     * })
     * 
     */
    create<T extends BusinessCreateArgs>(args: SelectSubset<T, BusinessCreateArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Businesses.
     * @param {BusinessCreateManyArgs} args - Arguments to create many Businesses.
     * @example
     * // Create many Businesses
     * const business = await prisma.business.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BusinessCreateManyArgs>(args?: SelectSubset<T, BusinessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Businesses and returns the data saved in the database.
     * @param {BusinessCreateManyAndReturnArgs} args - Arguments to create many Businesses.
     * @example
     * // Create many Businesses
     * const business = await prisma.business.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Businesses and only return the `id`
     * const businessWithIdOnly = await prisma.business.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BusinessCreateManyAndReturnArgs>(args?: SelectSubset<T, BusinessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Business.
     * @param {BusinessDeleteArgs} args - Arguments to delete one Business.
     * @example
     * // Delete one Business
     * const Business = await prisma.business.delete({
     *   where: {
     *     // ... filter to delete one Business
     *   }
     * })
     * 
     */
    delete<T extends BusinessDeleteArgs>(args: SelectSubset<T, BusinessDeleteArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Business.
     * @param {BusinessUpdateArgs} args - Arguments to update one Business.
     * @example
     * // Update one Business
     * const business = await prisma.business.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BusinessUpdateArgs>(args: SelectSubset<T, BusinessUpdateArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Businesses.
     * @param {BusinessDeleteManyArgs} args - Arguments to filter Businesses to delete.
     * @example
     * // Delete a few Businesses
     * const { count } = await prisma.business.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BusinessDeleteManyArgs>(args?: SelectSubset<T, BusinessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Businesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Businesses
     * const business = await prisma.business.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BusinessUpdateManyArgs>(args: SelectSubset<T, BusinessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Businesses and returns the data updated in the database.
     * @param {BusinessUpdateManyAndReturnArgs} args - Arguments to update many Businesses.
     * @example
     * // Update many Businesses
     * const business = await prisma.business.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Businesses and only return the `id`
     * const businessWithIdOnly = await prisma.business.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BusinessUpdateManyAndReturnArgs>(args: SelectSubset<T, BusinessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Business.
     * @param {BusinessUpsertArgs} args - Arguments to update or create a Business.
     * @example
     * // Update or create a Business
     * const business = await prisma.business.upsert({
     *   create: {
     *     // ... data to create a Business
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Business we want to update
     *   }
     * })
     */
    upsert<T extends BusinessUpsertArgs>(args: SelectSubset<T, BusinessUpsertArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Businesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessCountArgs} args - Arguments to filter Businesses to count.
     * @example
     * // Count the number of Businesses
     * const count = await prisma.business.count({
     *   where: {
     *     // ... the filter for the Businesses we want to count
     *   }
     * })
    **/
    count<T extends BusinessCountArgs>(
      args?: Subset<T, BusinessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BusinessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Business.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BusinessAggregateArgs>(args: Subset<T, BusinessAggregateArgs>): Prisma.PrismaPromise<GetBusinessAggregateType<T>>

    /**
     * Group by Business.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BusinessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BusinessGroupByArgs['orderBy'] }
        : { orderBy?: BusinessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BusinessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBusinessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Business model
   */
  readonly fields: BusinessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Business.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BusinessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends Business$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Business$categoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    documents<T extends Business$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Business$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends Business$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Business$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Business model
   */
  interface BusinessFieldRefs {
    readonly id: FieldRef<"Business", 'String'>
    readonly businessName: FieldRef<"Business", 'String'>
    readonly contactPerson: FieldRef<"Business", 'String'>
    readonly position: FieldRef<"Business", 'String'>
    readonly businessAddress: FieldRef<"Business", 'String'>
    readonly contactNumber: FieldRef<"Business", 'String'>
    readonly email: FieldRef<"Business", 'String'>
    readonly tole: FieldRef<"Business", 'String'>
    readonly wardNumber: FieldRef<"Business", 'Int'>
    readonly municipality: FieldRef<"Business", 'String'>
    readonly establishmentYear: FieldRef<"Business", 'String'>
    readonly ownershipType: FieldRef<"Business", 'String'>
    readonly businessType: FieldRef<"Business", 'String'>
    readonly businessField: FieldRef<"Business", 'String'>
    readonly totalInvestment: FieldRef<"Business", 'Float'>
    readonly locationOwnership: FieldRef<"Business", 'String'>
    readonly annualTurnover: FieldRef<"Business", 'Float'>
    readonly registrationNumber: FieldRef<"Business", 'String'>
    readonly vatNumber: FieldRef<"Business", 'String'>
    readonly laborPermit: FieldRef<"Business", 'String'>
    readonly panNumber: FieldRef<"Business", 'String'>
    readonly environmentApproval: FieldRef<"Business", 'String'>
    readonly otherPermits: FieldRef<"Business", 'String'>
    readonly permanentEmployees: FieldRef<"Business", 'Int'>
    readonly femaleEmployees: FieldRef<"Business", 'Int'>
    readonly temporaryContractEmployees: FieldRef<"Business", 'Int'>
    readonly marginalizedEmployees: FieldRef<"Business", 'Int'>
    readonly partTimeFreelancers: FieldRef<"Business", 'Int'>
    readonly avgSalary: FieldRef<"Business", 'Float'>
    readonly incomeSource: FieldRef<"Business", 'String'>
    readonly avgIncome: FieldRef<"Business", 'Float'>
    readonly avgExpense: FieldRef<"Business", 'Float'>
    readonly loanProvider: FieldRef<"Business", 'String'>
    readonly loanAmount: FieldRef<"Business", 'Float'>
    readonly loanDuration: FieldRef<"Business", 'String'>
    readonly expansionPlans: FieldRef<"Business", 'String'>
    readonly mainChallenges: FieldRef<"Business", 'String'>
    readonly municipalSupport: FieldRef<"Business", 'String'>
    readonly communityContribution: FieldRef<"Business", 'String'>
    readonly additionalSupport: FieldRef<"Business", 'String'>
    readonly formFilledDate: FieldRef<"Business", 'String'>
    readonly finalRemarks: FieldRef<"Business", 'String'>
    readonly isActive: FieldRef<"Business", 'Boolean'>
    readonly createdAt: FieldRef<"Business", 'DateTime'>
    readonly updatedAt: FieldRef<"Business", 'DateTime'>
    readonly categoryId: FieldRef<"Business", 'String'>
    readonly createdById: FieldRef<"Business", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Business findUnique
   */
  export type BusinessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Business
     */
    omit?: BusinessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * Filter, which Business to fetch.
     */
    where: BusinessWhereUniqueInput
  }

  /**
   * Business findUniqueOrThrow
   */
  export type BusinessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Business
     */
    omit?: BusinessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * Filter, which Business to fetch.
     */
    where: BusinessWhereUniqueInput
  }

  /**
   * Business findFirst
   */
  export type BusinessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Business
     */
    omit?: BusinessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * Filter, which Business to fetch.
     */
    where?: BusinessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Businesses to fetch.
     */
    orderBy?: BusinessOrderByWithRelationInput | BusinessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Businesses.
     */
    cursor?: BusinessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Businesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Businesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Businesses.
     */
    distinct?: BusinessScalarFieldEnum | BusinessScalarFieldEnum[]
  }

  /**
   * Business findFirstOrThrow
   */
  export type BusinessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Business
     */
    omit?: BusinessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * Filter, which Business to fetch.
     */
    where?: BusinessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Businesses to fetch.
     */
    orderBy?: BusinessOrderByWithRelationInput | BusinessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Businesses.
     */
    cursor?: BusinessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Businesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Businesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Businesses.
     */
    distinct?: BusinessScalarFieldEnum | BusinessScalarFieldEnum[]
  }

  /**
   * Business findMany
   */
  export type BusinessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Business
     */
    omit?: BusinessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * Filter, which Businesses to fetch.
     */
    where?: BusinessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Businesses to fetch.
     */
    orderBy?: BusinessOrderByWithRelationInput | BusinessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Businesses.
     */
    cursor?: BusinessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Businesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Businesses.
     */
    skip?: number
    distinct?: BusinessScalarFieldEnum | BusinessScalarFieldEnum[]
  }

  /**
   * Business create
   */
  export type BusinessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Business
     */
    omit?: BusinessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * The data needed to create a Business.
     */
    data: XOR<BusinessCreateInput, BusinessUncheckedCreateInput>
  }

  /**
   * Business createMany
   */
  export type BusinessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Businesses.
     */
    data: BusinessCreateManyInput | BusinessCreateManyInput[]
  }

  /**
   * Business createManyAndReturn
   */
  export type BusinessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Business
     */
    omit?: BusinessOmit<ExtArgs> | null
    /**
     * The data used to create many Businesses.
     */
    data: BusinessCreateManyInput | BusinessCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Business update
   */
  export type BusinessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Business
     */
    omit?: BusinessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * The data needed to update a Business.
     */
    data: XOR<BusinessUpdateInput, BusinessUncheckedUpdateInput>
    /**
     * Choose, which Business to update.
     */
    where: BusinessWhereUniqueInput
  }

  /**
   * Business updateMany
   */
  export type BusinessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Businesses.
     */
    data: XOR<BusinessUpdateManyMutationInput, BusinessUncheckedUpdateManyInput>
    /**
     * Filter which Businesses to update
     */
    where?: BusinessWhereInput
    /**
     * Limit how many Businesses to update.
     */
    limit?: number
  }

  /**
   * Business updateManyAndReturn
   */
  export type BusinessUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Business
     */
    omit?: BusinessOmit<ExtArgs> | null
    /**
     * The data used to update Businesses.
     */
    data: XOR<BusinessUpdateManyMutationInput, BusinessUncheckedUpdateManyInput>
    /**
     * Filter which Businesses to update
     */
    where?: BusinessWhereInput
    /**
     * Limit how many Businesses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Business upsert
   */
  export type BusinessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Business
     */
    omit?: BusinessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * The filter to search for the Business to update in case it exists.
     */
    where: BusinessWhereUniqueInput
    /**
     * In case the Business found by the `where` argument doesn't exist, create a new Business with this data.
     */
    create: XOR<BusinessCreateInput, BusinessUncheckedCreateInput>
    /**
     * In case the Business was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BusinessUpdateInput, BusinessUncheckedUpdateInput>
  }

  /**
   * Business delete
   */
  export type BusinessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Business
     */
    omit?: BusinessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * Filter which Business to delete.
     */
    where: BusinessWhereUniqueInput
  }

  /**
   * Business deleteMany
   */
  export type BusinessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Businesses to delete
     */
    where?: BusinessWhereInput
    /**
     * Limit how many Businesses to delete.
     */
    limit?: number
  }

  /**
   * Business.category
   */
  export type Business$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * Business.documents
   */
  export type Business$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessDocument
     */
    select?: BusinessDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessDocument
     */
    omit?: BusinessDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessDocumentInclude<ExtArgs> | null
    where?: BusinessDocumentWhereInput
    orderBy?: BusinessDocumentOrderByWithRelationInput | BusinessDocumentOrderByWithRelationInput[]
    cursor?: BusinessDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessDocumentScalarFieldEnum | BusinessDocumentScalarFieldEnum[]
  }

  /**
   * Business.auditLogs
   */
  export type Business$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * Business without action
   */
  export type BusinessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Business
     */
    omit?: BusinessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
  }


  /**
   * Model BusinessDocument
   */

  export type AggregateBusinessDocument = {
    _count: BusinessDocumentCountAggregateOutputType | null
    _avg: BusinessDocumentAvgAggregateOutputType | null
    _sum: BusinessDocumentSumAggregateOutputType | null
    _min: BusinessDocumentMinAggregateOutputType | null
    _max: BusinessDocumentMaxAggregateOutputType | null
  }

  export type BusinessDocumentAvgAggregateOutputType = {
    fileSize: number | null
  }

  export type BusinessDocumentSumAggregateOutputType = {
    fileSize: number | null
  }

  export type BusinessDocumentMinAggregateOutputType = {
    id: string | null
    originalName: string | null
    fileName: string | null
    filePath: string | null
    fileSize: number | null
    mimeType: string | null
    uploadedAt: Date | null
    businessId: string | null
  }

  export type BusinessDocumentMaxAggregateOutputType = {
    id: string | null
    originalName: string | null
    fileName: string | null
    filePath: string | null
    fileSize: number | null
    mimeType: string | null
    uploadedAt: Date | null
    businessId: string | null
  }

  export type BusinessDocumentCountAggregateOutputType = {
    id: number
    originalName: number
    fileName: number
    filePath: number
    fileSize: number
    mimeType: number
    uploadedAt: number
    businessId: number
    _all: number
  }


  export type BusinessDocumentAvgAggregateInputType = {
    fileSize?: true
  }

  export type BusinessDocumentSumAggregateInputType = {
    fileSize?: true
  }

  export type BusinessDocumentMinAggregateInputType = {
    id?: true
    originalName?: true
    fileName?: true
    filePath?: true
    fileSize?: true
    mimeType?: true
    uploadedAt?: true
    businessId?: true
  }

  export type BusinessDocumentMaxAggregateInputType = {
    id?: true
    originalName?: true
    fileName?: true
    filePath?: true
    fileSize?: true
    mimeType?: true
    uploadedAt?: true
    businessId?: true
  }

  export type BusinessDocumentCountAggregateInputType = {
    id?: true
    originalName?: true
    fileName?: true
    filePath?: true
    fileSize?: true
    mimeType?: true
    uploadedAt?: true
    businessId?: true
    _all?: true
  }

  export type BusinessDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusinessDocument to aggregate.
     */
    where?: BusinessDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessDocuments to fetch.
     */
    orderBy?: BusinessDocumentOrderByWithRelationInput | BusinessDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BusinessDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BusinessDocuments
    **/
    _count?: true | BusinessDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BusinessDocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BusinessDocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BusinessDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BusinessDocumentMaxAggregateInputType
  }

  export type GetBusinessDocumentAggregateType<T extends BusinessDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateBusinessDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBusinessDocument[P]>
      : GetScalarType<T[P], AggregateBusinessDocument[P]>
  }




  export type BusinessDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessDocumentWhereInput
    orderBy?: BusinessDocumentOrderByWithAggregationInput | BusinessDocumentOrderByWithAggregationInput[]
    by: BusinessDocumentScalarFieldEnum[] | BusinessDocumentScalarFieldEnum
    having?: BusinessDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BusinessDocumentCountAggregateInputType | true
    _avg?: BusinessDocumentAvgAggregateInputType
    _sum?: BusinessDocumentSumAggregateInputType
    _min?: BusinessDocumentMinAggregateInputType
    _max?: BusinessDocumentMaxAggregateInputType
  }

  export type BusinessDocumentGroupByOutputType = {
    id: string
    originalName: string
    fileName: string
    filePath: string
    fileSize: number
    mimeType: string
    uploadedAt: Date
    businessId: string
    _count: BusinessDocumentCountAggregateOutputType | null
    _avg: BusinessDocumentAvgAggregateOutputType | null
    _sum: BusinessDocumentSumAggregateOutputType | null
    _min: BusinessDocumentMinAggregateOutputType | null
    _max: BusinessDocumentMaxAggregateOutputType | null
  }

  type GetBusinessDocumentGroupByPayload<T extends BusinessDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BusinessDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BusinessDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BusinessDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], BusinessDocumentGroupByOutputType[P]>
        }
      >
    >


  export type BusinessDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    originalName?: boolean
    fileName?: boolean
    filePath?: boolean
    fileSize?: boolean
    mimeType?: boolean
    uploadedAt?: boolean
    businessId?: boolean
    business?: boolean | BusinessDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["businessDocument"]>

  export type BusinessDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    originalName?: boolean
    fileName?: boolean
    filePath?: boolean
    fileSize?: boolean
    mimeType?: boolean
    uploadedAt?: boolean
    businessId?: boolean
    business?: boolean | BusinessDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["businessDocument"]>

  export type BusinessDocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    originalName?: boolean
    fileName?: boolean
    filePath?: boolean
    fileSize?: boolean
    mimeType?: boolean
    uploadedAt?: boolean
    businessId?: boolean
    business?: boolean | BusinessDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["businessDocument"]>

  export type BusinessDocumentSelectScalar = {
    id?: boolean
    originalName?: boolean
    fileName?: boolean
    filePath?: boolean
    fileSize?: boolean
    mimeType?: boolean
    uploadedAt?: boolean
    businessId?: boolean
  }

  export type BusinessDocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "originalName" | "fileName" | "filePath" | "fileSize" | "mimeType" | "uploadedAt" | "businessId", ExtArgs["result"]["businessDocument"]>
  export type BusinessDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>
  }
  export type BusinessDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>
  }
  export type BusinessDocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>
  }

  export type $BusinessDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BusinessDocument"
    objects: {
      business: Prisma.$BusinessPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      originalName: string
      fileName: string
      filePath: string
      fileSize: number
      mimeType: string
      uploadedAt: Date
      businessId: string
    }, ExtArgs["result"]["businessDocument"]>
    composites: {}
  }

  type BusinessDocumentGetPayload<S extends boolean | null | undefined | BusinessDocumentDefaultArgs> = $Result.GetResult<Prisma.$BusinessDocumentPayload, S>

  type BusinessDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BusinessDocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BusinessDocumentCountAggregateInputType | true
    }

  export interface BusinessDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BusinessDocument'], meta: { name: 'BusinessDocument' } }
    /**
     * Find zero or one BusinessDocument that matches the filter.
     * @param {BusinessDocumentFindUniqueArgs} args - Arguments to find a BusinessDocument
     * @example
     * // Get one BusinessDocument
     * const businessDocument = await prisma.businessDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BusinessDocumentFindUniqueArgs>(args: SelectSubset<T, BusinessDocumentFindUniqueArgs<ExtArgs>>): Prisma__BusinessDocumentClient<$Result.GetResult<Prisma.$BusinessDocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BusinessDocument that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BusinessDocumentFindUniqueOrThrowArgs} args - Arguments to find a BusinessDocument
     * @example
     * // Get one BusinessDocument
     * const businessDocument = await prisma.businessDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BusinessDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, BusinessDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BusinessDocumentClient<$Result.GetResult<Prisma.$BusinessDocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BusinessDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessDocumentFindFirstArgs} args - Arguments to find a BusinessDocument
     * @example
     * // Get one BusinessDocument
     * const businessDocument = await prisma.businessDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BusinessDocumentFindFirstArgs>(args?: SelectSubset<T, BusinessDocumentFindFirstArgs<ExtArgs>>): Prisma__BusinessDocumentClient<$Result.GetResult<Prisma.$BusinessDocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BusinessDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessDocumentFindFirstOrThrowArgs} args - Arguments to find a BusinessDocument
     * @example
     * // Get one BusinessDocument
     * const businessDocument = await prisma.businessDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BusinessDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, BusinessDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__BusinessDocumentClient<$Result.GetResult<Prisma.$BusinessDocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BusinessDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BusinessDocuments
     * const businessDocuments = await prisma.businessDocument.findMany()
     * 
     * // Get first 10 BusinessDocuments
     * const businessDocuments = await prisma.businessDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const businessDocumentWithIdOnly = await prisma.businessDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BusinessDocumentFindManyArgs>(args?: SelectSubset<T, BusinessDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BusinessDocument.
     * @param {BusinessDocumentCreateArgs} args - Arguments to create a BusinessDocument.
     * @example
     * // Create one BusinessDocument
     * const BusinessDocument = await prisma.businessDocument.create({
     *   data: {
     *     // ... data to create a BusinessDocument
     *   }
     * })
     * 
     */
    create<T extends BusinessDocumentCreateArgs>(args: SelectSubset<T, BusinessDocumentCreateArgs<ExtArgs>>): Prisma__BusinessDocumentClient<$Result.GetResult<Prisma.$BusinessDocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BusinessDocuments.
     * @param {BusinessDocumentCreateManyArgs} args - Arguments to create many BusinessDocuments.
     * @example
     * // Create many BusinessDocuments
     * const businessDocument = await prisma.businessDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BusinessDocumentCreateManyArgs>(args?: SelectSubset<T, BusinessDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BusinessDocuments and returns the data saved in the database.
     * @param {BusinessDocumentCreateManyAndReturnArgs} args - Arguments to create many BusinessDocuments.
     * @example
     * // Create many BusinessDocuments
     * const businessDocument = await prisma.businessDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BusinessDocuments and only return the `id`
     * const businessDocumentWithIdOnly = await prisma.businessDocument.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BusinessDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, BusinessDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessDocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BusinessDocument.
     * @param {BusinessDocumentDeleteArgs} args - Arguments to delete one BusinessDocument.
     * @example
     * // Delete one BusinessDocument
     * const BusinessDocument = await prisma.businessDocument.delete({
     *   where: {
     *     // ... filter to delete one BusinessDocument
     *   }
     * })
     * 
     */
    delete<T extends BusinessDocumentDeleteArgs>(args: SelectSubset<T, BusinessDocumentDeleteArgs<ExtArgs>>): Prisma__BusinessDocumentClient<$Result.GetResult<Prisma.$BusinessDocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BusinessDocument.
     * @param {BusinessDocumentUpdateArgs} args - Arguments to update one BusinessDocument.
     * @example
     * // Update one BusinessDocument
     * const businessDocument = await prisma.businessDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BusinessDocumentUpdateArgs>(args: SelectSubset<T, BusinessDocumentUpdateArgs<ExtArgs>>): Prisma__BusinessDocumentClient<$Result.GetResult<Prisma.$BusinessDocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BusinessDocuments.
     * @param {BusinessDocumentDeleteManyArgs} args - Arguments to filter BusinessDocuments to delete.
     * @example
     * // Delete a few BusinessDocuments
     * const { count } = await prisma.businessDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BusinessDocumentDeleteManyArgs>(args?: SelectSubset<T, BusinessDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BusinessDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BusinessDocuments
     * const businessDocument = await prisma.businessDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BusinessDocumentUpdateManyArgs>(args: SelectSubset<T, BusinessDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BusinessDocuments and returns the data updated in the database.
     * @param {BusinessDocumentUpdateManyAndReturnArgs} args - Arguments to update many BusinessDocuments.
     * @example
     * // Update many BusinessDocuments
     * const businessDocument = await prisma.businessDocument.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BusinessDocuments and only return the `id`
     * const businessDocumentWithIdOnly = await prisma.businessDocument.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BusinessDocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, BusinessDocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessDocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BusinessDocument.
     * @param {BusinessDocumentUpsertArgs} args - Arguments to update or create a BusinessDocument.
     * @example
     * // Update or create a BusinessDocument
     * const businessDocument = await prisma.businessDocument.upsert({
     *   create: {
     *     // ... data to create a BusinessDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BusinessDocument we want to update
     *   }
     * })
     */
    upsert<T extends BusinessDocumentUpsertArgs>(args: SelectSubset<T, BusinessDocumentUpsertArgs<ExtArgs>>): Prisma__BusinessDocumentClient<$Result.GetResult<Prisma.$BusinessDocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BusinessDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessDocumentCountArgs} args - Arguments to filter BusinessDocuments to count.
     * @example
     * // Count the number of BusinessDocuments
     * const count = await prisma.businessDocument.count({
     *   where: {
     *     // ... the filter for the BusinessDocuments we want to count
     *   }
     * })
    **/
    count<T extends BusinessDocumentCountArgs>(
      args?: Subset<T, BusinessDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BusinessDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BusinessDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BusinessDocumentAggregateArgs>(args: Subset<T, BusinessDocumentAggregateArgs>): Prisma.PrismaPromise<GetBusinessDocumentAggregateType<T>>

    /**
     * Group by BusinessDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BusinessDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BusinessDocumentGroupByArgs['orderBy'] }
        : { orderBy?: BusinessDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BusinessDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBusinessDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BusinessDocument model
   */
  readonly fields: BusinessDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BusinessDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BusinessDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    business<T extends BusinessDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BusinessDefaultArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BusinessDocument model
   */
  interface BusinessDocumentFieldRefs {
    readonly id: FieldRef<"BusinessDocument", 'String'>
    readonly originalName: FieldRef<"BusinessDocument", 'String'>
    readonly fileName: FieldRef<"BusinessDocument", 'String'>
    readonly filePath: FieldRef<"BusinessDocument", 'String'>
    readonly fileSize: FieldRef<"BusinessDocument", 'Int'>
    readonly mimeType: FieldRef<"BusinessDocument", 'String'>
    readonly uploadedAt: FieldRef<"BusinessDocument", 'DateTime'>
    readonly businessId: FieldRef<"BusinessDocument", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BusinessDocument findUnique
   */
  export type BusinessDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessDocument
     */
    select?: BusinessDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessDocument
     */
    omit?: BusinessDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessDocumentInclude<ExtArgs> | null
    /**
     * Filter, which BusinessDocument to fetch.
     */
    where: BusinessDocumentWhereUniqueInput
  }

  /**
   * BusinessDocument findUniqueOrThrow
   */
  export type BusinessDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessDocument
     */
    select?: BusinessDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessDocument
     */
    omit?: BusinessDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessDocumentInclude<ExtArgs> | null
    /**
     * Filter, which BusinessDocument to fetch.
     */
    where: BusinessDocumentWhereUniqueInput
  }

  /**
   * BusinessDocument findFirst
   */
  export type BusinessDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessDocument
     */
    select?: BusinessDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessDocument
     */
    omit?: BusinessDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessDocumentInclude<ExtArgs> | null
    /**
     * Filter, which BusinessDocument to fetch.
     */
    where?: BusinessDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessDocuments to fetch.
     */
    orderBy?: BusinessDocumentOrderByWithRelationInput | BusinessDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusinessDocuments.
     */
    cursor?: BusinessDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusinessDocuments.
     */
    distinct?: BusinessDocumentScalarFieldEnum | BusinessDocumentScalarFieldEnum[]
  }

  /**
   * BusinessDocument findFirstOrThrow
   */
  export type BusinessDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessDocument
     */
    select?: BusinessDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessDocument
     */
    omit?: BusinessDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessDocumentInclude<ExtArgs> | null
    /**
     * Filter, which BusinessDocument to fetch.
     */
    where?: BusinessDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessDocuments to fetch.
     */
    orderBy?: BusinessDocumentOrderByWithRelationInput | BusinessDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusinessDocuments.
     */
    cursor?: BusinessDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusinessDocuments.
     */
    distinct?: BusinessDocumentScalarFieldEnum | BusinessDocumentScalarFieldEnum[]
  }

  /**
   * BusinessDocument findMany
   */
  export type BusinessDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessDocument
     */
    select?: BusinessDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessDocument
     */
    omit?: BusinessDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessDocumentInclude<ExtArgs> | null
    /**
     * Filter, which BusinessDocuments to fetch.
     */
    where?: BusinessDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessDocuments to fetch.
     */
    orderBy?: BusinessDocumentOrderByWithRelationInput | BusinessDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BusinessDocuments.
     */
    cursor?: BusinessDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessDocuments.
     */
    skip?: number
    distinct?: BusinessDocumentScalarFieldEnum | BusinessDocumentScalarFieldEnum[]
  }

  /**
   * BusinessDocument create
   */
  export type BusinessDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessDocument
     */
    select?: BusinessDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessDocument
     */
    omit?: BusinessDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a BusinessDocument.
     */
    data: XOR<BusinessDocumentCreateInput, BusinessDocumentUncheckedCreateInput>
  }

  /**
   * BusinessDocument createMany
   */
  export type BusinessDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BusinessDocuments.
     */
    data: BusinessDocumentCreateManyInput | BusinessDocumentCreateManyInput[]
  }

  /**
   * BusinessDocument createManyAndReturn
   */
  export type BusinessDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessDocument
     */
    select?: BusinessDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessDocument
     */
    omit?: BusinessDocumentOmit<ExtArgs> | null
    /**
     * The data used to create many BusinessDocuments.
     */
    data: BusinessDocumentCreateManyInput | BusinessDocumentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BusinessDocument update
   */
  export type BusinessDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessDocument
     */
    select?: BusinessDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessDocument
     */
    omit?: BusinessDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a BusinessDocument.
     */
    data: XOR<BusinessDocumentUpdateInput, BusinessDocumentUncheckedUpdateInput>
    /**
     * Choose, which BusinessDocument to update.
     */
    where: BusinessDocumentWhereUniqueInput
  }

  /**
   * BusinessDocument updateMany
   */
  export type BusinessDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BusinessDocuments.
     */
    data: XOR<BusinessDocumentUpdateManyMutationInput, BusinessDocumentUncheckedUpdateManyInput>
    /**
     * Filter which BusinessDocuments to update
     */
    where?: BusinessDocumentWhereInput
    /**
     * Limit how many BusinessDocuments to update.
     */
    limit?: number
  }

  /**
   * BusinessDocument updateManyAndReturn
   */
  export type BusinessDocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessDocument
     */
    select?: BusinessDocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessDocument
     */
    omit?: BusinessDocumentOmit<ExtArgs> | null
    /**
     * The data used to update BusinessDocuments.
     */
    data: XOR<BusinessDocumentUpdateManyMutationInput, BusinessDocumentUncheckedUpdateManyInput>
    /**
     * Filter which BusinessDocuments to update
     */
    where?: BusinessDocumentWhereInput
    /**
     * Limit how many BusinessDocuments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessDocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BusinessDocument upsert
   */
  export type BusinessDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessDocument
     */
    select?: BusinessDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessDocument
     */
    omit?: BusinessDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the BusinessDocument to update in case it exists.
     */
    where: BusinessDocumentWhereUniqueInput
    /**
     * In case the BusinessDocument found by the `where` argument doesn't exist, create a new BusinessDocument with this data.
     */
    create: XOR<BusinessDocumentCreateInput, BusinessDocumentUncheckedCreateInput>
    /**
     * In case the BusinessDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BusinessDocumentUpdateInput, BusinessDocumentUncheckedUpdateInput>
  }

  /**
   * BusinessDocument delete
   */
  export type BusinessDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessDocument
     */
    select?: BusinessDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessDocument
     */
    omit?: BusinessDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessDocumentInclude<ExtArgs> | null
    /**
     * Filter which BusinessDocument to delete.
     */
    where: BusinessDocumentWhereUniqueInput
  }

  /**
   * BusinessDocument deleteMany
   */
  export type BusinessDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusinessDocuments to delete
     */
    where?: BusinessDocumentWhereInput
    /**
     * Limit how many BusinessDocuments to delete.
     */
    limit?: number
  }

  /**
   * BusinessDocument without action
   */
  export type BusinessDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessDocument
     */
    select?: BusinessDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessDocument
     */
    omit?: BusinessDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessDocumentInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    action: string | null
    tableName: string | null
    recordId: string | null
    oldData: string | null
    newData: string | null
    timestamp: Date | null
    userId: string | null
    businessId: string | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    action: string | null
    tableName: string | null
    recordId: string | null
    oldData: string | null
    newData: string | null
    timestamp: Date | null
    userId: string | null
    businessId: string | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    action: number
    tableName: number
    recordId: number
    oldData: number
    newData: number
    timestamp: number
    userId: number
    businessId: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    action?: true
    tableName?: true
    recordId?: true
    oldData?: true
    newData?: true
    timestamp?: true
    userId?: true
    businessId?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    action?: true
    tableName?: true
    recordId?: true
    oldData?: true
    newData?: true
    timestamp?: true
    userId?: true
    businessId?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    action?: true
    tableName?: true
    recordId?: true
    oldData?: true
    newData?: true
    timestamp?: true
    userId?: true
    businessId?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    action: string
    tableName: string
    recordId: string
    oldData: string | null
    newData: string | null
    timestamp: Date
    userId: string
    businessId: string | null
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    tableName?: boolean
    recordId?: boolean
    oldData?: boolean
    newData?: boolean
    timestamp?: boolean
    userId?: boolean
    businessId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    business?: boolean | AuditLog$businessArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    tableName?: boolean
    recordId?: boolean
    oldData?: boolean
    newData?: boolean
    timestamp?: boolean
    userId?: boolean
    businessId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    business?: boolean | AuditLog$businessArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    tableName?: boolean
    recordId?: boolean
    oldData?: boolean
    newData?: boolean
    timestamp?: boolean
    userId?: boolean
    businessId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    business?: boolean | AuditLog$businessArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    action?: boolean
    tableName?: boolean
    recordId?: boolean
    oldData?: boolean
    newData?: boolean
    timestamp?: boolean
    userId?: boolean
    businessId?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "action" | "tableName" | "recordId" | "oldData" | "newData" | "timestamp" | "userId" | "businessId", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    business?: boolean | AuditLog$businessArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    business?: boolean | AuditLog$businessArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    business?: boolean | AuditLog$businessArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      business: Prisma.$BusinessPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: string
      tableName: string
      recordId: string
      oldData: string | null
      newData: string | null
      timestamp: Date
      userId: string
      businessId: string | null
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    business<T extends AuditLog$businessArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$businessArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly tableName: FieldRef<"AuditLog", 'String'>
    readonly recordId: FieldRef<"AuditLog", 'String'>
    readonly oldData: FieldRef<"AuditLog", 'String'>
    readonly newData: FieldRef<"AuditLog", 'String'>
    readonly timestamp: FieldRef<"AuditLog", 'DateTime'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly businessId: FieldRef<"AuditLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog.business
   */
  export type AuditLog$businessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Business
     */
    omit?: BusinessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    where?: BusinessWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    role: 'role',
    fullName: 'fullName',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    nameEnglish: 'nameEnglish',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const BusinessScalarFieldEnum: {
    id: 'id',
    businessName: 'businessName',
    contactPerson: 'contactPerson',
    position: 'position',
    businessAddress: 'businessAddress',
    contactNumber: 'contactNumber',
    email: 'email',
    tole: 'tole',
    wardNumber: 'wardNumber',
    municipality: 'municipality',
    establishmentYear: 'establishmentYear',
    ownershipType: 'ownershipType',
    businessType: 'businessType',
    businessField: 'businessField',
    totalInvestment: 'totalInvestment',
    locationOwnership: 'locationOwnership',
    annualTurnover: 'annualTurnover',
    registrationNumber: 'registrationNumber',
    vatNumber: 'vatNumber',
    laborPermit: 'laborPermit',
    panNumber: 'panNumber',
    environmentApproval: 'environmentApproval',
    otherPermits: 'otherPermits',
    permanentEmployees: 'permanentEmployees',
    femaleEmployees: 'femaleEmployees',
    temporaryContractEmployees: 'temporaryContractEmployees',
    marginalizedEmployees: 'marginalizedEmployees',
    partTimeFreelancers: 'partTimeFreelancers',
    avgSalary: 'avgSalary',
    incomeSource: 'incomeSource',
    avgIncome: 'avgIncome',
    avgExpense: 'avgExpense',
    loanProvider: 'loanProvider',
    loanAmount: 'loanAmount',
    loanDuration: 'loanDuration',
    expansionPlans: 'expansionPlans',
    mainChallenges: 'mainChallenges',
    municipalSupport: 'municipalSupport',
    communityContribution: 'communityContribution',
    additionalSupport: 'additionalSupport',
    formFilledDate: 'formFilledDate',
    finalRemarks: 'finalRemarks',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    categoryId: 'categoryId',
    createdById: 'createdById'
  };

  export type BusinessScalarFieldEnum = (typeof BusinessScalarFieldEnum)[keyof typeof BusinessScalarFieldEnum]


  export const BusinessDocumentScalarFieldEnum: {
    id: 'id',
    originalName: 'originalName',
    fileName: 'fileName',
    filePath: 'filePath',
    fileSize: 'fileSize',
    mimeType: 'mimeType',
    uploadedAt: 'uploadedAt',
    businessId: 'businessId'
  };

  export type BusinessDocumentScalarFieldEnum = (typeof BusinessDocumentScalarFieldEnum)[keyof typeof BusinessDocumentScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    action: 'action',
    tableName: 'tableName',
    recordId: 'recordId',
    oldData: 'oldData',
    newData: 'newData',
    timestamp: 'timestamp',
    userId: 'userId',
    businessId: 'businessId'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    fullName?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    businesses?: BusinessListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrder
    role?: SortOrder
    fullName?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    businesses?: BusinessOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    fullName?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    businesses?: BusinessListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrder
    role?: SortOrder
    fullName?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    fullName?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    nameEnglish?: StringNullableFilter<"Category"> | string | null
    description?: StringNullableFilter<"Category"> | string | null
    isActive?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    businesses?: BusinessListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    nameEnglish?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    businesses?: BusinessOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    nameEnglish?: StringNullableFilter<"Category"> | string | null
    description?: StringNullableFilter<"Category"> | string | null
    isActive?: BoolFilter<"Category"> | boolean
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    businesses?: BusinessListRelationFilter
  }, "id" | "name">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    nameEnglish?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    nameEnglish?: StringNullableWithAggregatesFilter<"Category"> | string | null
    description?: StringNullableWithAggregatesFilter<"Category"> | string | null
    isActive?: BoolWithAggregatesFilter<"Category"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type BusinessWhereInput = {
    AND?: BusinessWhereInput | BusinessWhereInput[]
    OR?: BusinessWhereInput[]
    NOT?: BusinessWhereInput | BusinessWhereInput[]
    id?: StringFilter<"Business"> | string
    businessName?: StringFilter<"Business"> | string
    contactPerson?: StringFilter<"Business"> | string
    position?: StringNullableFilter<"Business"> | string | null
    businessAddress?: StringFilter<"Business"> | string
    contactNumber?: StringFilter<"Business"> | string
    email?: StringNullableFilter<"Business"> | string | null
    tole?: StringNullableFilter<"Business"> | string | null
    wardNumber?: IntFilter<"Business"> | number
    municipality?: StringNullableFilter<"Business"> | string | null
    establishmentYear?: StringNullableFilter<"Business"> | string | null
    ownershipType?: StringNullableFilter<"Business"> | string | null
    businessType?: StringNullableFilter<"Business"> | string | null
    businessField?: StringNullableFilter<"Business"> | string | null
    totalInvestment?: FloatNullableFilter<"Business"> | number | null
    locationOwnership?: StringNullableFilter<"Business"> | string | null
    annualTurnover?: FloatNullableFilter<"Business"> | number | null
    registrationNumber?: StringNullableFilter<"Business"> | string | null
    vatNumber?: StringNullableFilter<"Business"> | string | null
    laborPermit?: StringNullableFilter<"Business"> | string | null
    panNumber?: StringNullableFilter<"Business"> | string | null
    environmentApproval?: StringNullableFilter<"Business"> | string | null
    otherPermits?: StringNullableFilter<"Business"> | string | null
    permanentEmployees?: IntNullableFilter<"Business"> | number | null
    femaleEmployees?: IntNullableFilter<"Business"> | number | null
    temporaryContractEmployees?: IntNullableFilter<"Business"> | number | null
    marginalizedEmployees?: IntNullableFilter<"Business"> | number | null
    partTimeFreelancers?: IntNullableFilter<"Business"> | number | null
    avgSalary?: FloatNullableFilter<"Business"> | number | null
    incomeSource?: StringNullableFilter<"Business"> | string | null
    avgIncome?: FloatNullableFilter<"Business"> | number | null
    avgExpense?: FloatNullableFilter<"Business"> | number | null
    loanProvider?: StringNullableFilter<"Business"> | string | null
    loanAmount?: FloatNullableFilter<"Business"> | number | null
    loanDuration?: StringNullableFilter<"Business"> | string | null
    expansionPlans?: StringNullableFilter<"Business"> | string | null
    mainChallenges?: StringNullableFilter<"Business"> | string | null
    municipalSupport?: StringNullableFilter<"Business"> | string | null
    communityContribution?: StringNullableFilter<"Business"> | string | null
    additionalSupport?: StringNullableFilter<"Business"> | string | null
    formFilledDate?: StringNullableFilter<"Business"> | string | null
    finalRemarks?: StringNullableFilter<"Business"> | string | null
    isActive?: BoolFilter<"Business"> | boolean
    createdAt?: DateTimeFilter<"Business"> | Date | string
    updatedAt?: DateTimeFilter<"Business"> | Date | string
    categoryId?: StringNullableFilter<"Business"> | string | null
    createdById?: StringFilter<"Business"> | string
    category?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    documents?: BusinessDocumentListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type BusinessOrderByWithRelationInput = {
    id?: SortOrder
    businessName?: SortOrder
    contactPerson?: SortOrder
    position?: SortOrderInput | SortOrder
    businessAddress?: SortOrder
    contactNumber?: SortOrder
    email?: SortOrderInput | SortOrder
    tole?: SortOrderInput | SortOrder
    wardNumber?: SortOrder
    municipality?: SortOrderInput | SortOrder
    establishmentYear?: SortOrderInput | SortOrder
    ownershipType?: SortOrderInput | SortOrder
    businessType?: SortOrderInput | SortOrder
    businessField?: SortOrderInput | SortOrder
    totalInvestment?: SortOrderInput | SortOrder
    locationOwnership?: SortOrderInput | SortOrder
    annualTurnover?: SortOrderInput | SortOrder
    registrationNumber?: SortOrderInput | SortOrder
    vatNumber?: SortOrderInput | SortOrder
    laborPermit?: SortOrderInput | SortOrder
    panNumber?: SortOrderInput | SortOrder
    environmentApproval?: SortOrderInput | SortOrder
    otherPermits?: SortOrderInput | SortOrder
    permanentEmployees?: SortOrderInput | SortOrder
    femaleEmployees?: SortOrderInput | SortOrder
    temporaryContractEmployees?: SortOrderInput | SortOrder
    marginalizedEmployees?: SortOrderInput | SortOrder
    partTimeFreelancers?: SortOrderInput | SortOrder
    avgSalary?: SortOrderInput | SortOrder
    incomeSource?: SortOrderInput | SortOrder
    avgIncome?: SortOrderInput | SortOrder
    avgExpense?: SortOrderInput | SortOrder
    loanProvider?: SortOrderInput | SortOrder
    loanAmount?: SortOrderInput | SortOrder
    loanDuration?: SortOrderInput | SortOrder
    expansionPlans?: SortOrderInput | SortOrder
    mainChallenges?: SortOrderInput | SortOrder
    municipalSupport?: SortOrderInput | SortOrder
    communityContribution?: SortOrderInput | SortOrder
    additionalSupport?: SortOrderInput | SortOrder
    formFilledDate?: SortOrderInput | SortOrder
    finalRemarks?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    category?: CategoryOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    documents?: BusinessDocumentOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type BusinessWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BusinessWhereInput | BusinessWhereInput[]
    OR?: BusinessWhereInput[]
    NOT?: BusinessWhereInput | BusinessWhereInput[]
    businessName?: StringFilter<"Business"> | string
    contactPerson?: StringFilter<"Business"> | string
    position?: StringNullableFilter<"Business"> | string | null
    businessAddress?: StringFilter<"Business"> | string
    contactNumber?: StringFilter<"Business"> | string
    email?: StringNullableFilter<"Business"> | string | null
    tole?: StringNullableFilter<"Business"> | string | null
    wardNumber?: IntFilter<"Business"> | number
    municipality?: StringNullableFilter<"Business"> | string | null
    establishmentYear?: StringNullableFilter<"Business"> | string | null
    ownershipType?: StringNullableFilter<"Business"> | string | null
    businessType?: StringNullableFilter<"Business"> | string | null
    businessField?: StringNullableFilter<"Business"> | string | null
    totalInvestment?: FloatNullableFilter<"Business"> | number | null
    locationOwnership?: StringNullableFilter<"Business"> | string | null
    annualTurnover?: FloatNullableFilter<"Business"> | number | null
    registrationNumber?: StringNullableFilter<"Business"> | string | null
    vatNumber?: StringNullableFilter<"Business"> | string | null
    laborPermit?: StringNullableFilter<"Business"> | string | null
    panNumber?: StringNullableFilter<"Business"> | string | null
    environmentApproval?: StringNullableFilter<"Business"> | string | null
    otherPermits?: StringNullableFilter<"Business"> | string | null
    permanentEmployees?: IntNullableFilter<"Business"> | number | null
    femaleEmployees?: IntNullableFilter<"Business"> | number | null
    temporaryContractEmployees?: IntNullableFilter<"Business"> | number | null
    marginalizedEmployees?: IntNullableFilter<"Business"> | number | null
    partTimeFreelancers?: IntNullableFilter<"Business"> | number | null
    avgSalary?: FloatNullableFilter<"Business"> | number | null
    incomeSource?: StringNullableFilter<"Business"> | string | null
    avgIncome?: FloatNullableFilter<"Business"> | number | null
    avgExpense?: FloatNullableFilter<"Business"> | number | null
    loanProvider?: StringNullableFilter<"Business"> | string | null
    loanAmount?: FloatNullableFilter<"Business"> | number | null
    loanDuration?: StringNullableFilter<"Business"> | string | null
    expansionPlans?: StringNullableFilter<"Business"> | string | null
    mainChallenges?: StringNullableFilter<"Business"> | string | null
    municipalSupport?: StringNullableFilter<"Business"> | string | null
    communityContribution?: StringNullableFilter<"Business"> | string | null
    additionalSupport?: StringNullableFilter<"Business"> | string | null
    formFilledDate?: StringNullableFilter<"Business"> | string | null
    finalRemarks?: StringNullableFilter<"Business"> | string | null
    isActive?: BoolFilter<"Business"> | boolean
    createdAt?: DateTimeFilter<"Business"> | Date | string
    updatedAt?: DateTimeFilter<"Business"> | Date | string
    categoryId?: StringNullableFilter<"Business"> | string | null
    createdById?: StringFilter<"Business"> | string
    category?: XOR<CategoryNullableScalarRelationFilter, CategoryWhereInput> | null
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    documents?: BusinessDocumentListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id">

  export type BusinessOrderByWithAggregationInput = {
    id?: SortOrder
    businessName?: SortOrder
    contactPerson?: SortOrder
    position?: SortOrderInput | SortOrder
    businessAddress?: SortOrder
    contactNumber?: SortOrder
    email?: SortOrderInput | SortOrder
    tole?: SortOrderInput | SortOrder
    wardNumber?: SortOrder
    municipality?: SortOrderInput | SortOrder
    establishmentYear?: SortOrderInput | SortOrder
    ownershipType?: SortOrderInput | SortOrder
    businessType?: SortOrderInput | SortOrder
    businessField?: SortOrderInput | SortOrder
    totalInvestment?: SortOrderInput | SortOrder
    locationOwnership?: SortOrderInput | SortOrder
    annualTurnover?: SortOrderInput | SortOrder
    registrationNumber?: SortOrderInput | SortOrder
    vatNumber?: SortOrderInput | SortOrder
    laborPermit?: SortOrderInput | SortOrder
    panNumber?: SortOrderInput | SortOrder
    environmentApproval?: SortOrderInput | SortOrder
    otherPermits?: SortOrderInput | SortOrder
    permanentEmployees?: SortOrderInput | SortOrder
    femaleEmployees?: SortOrderInput | SortOrder
    temporaryContractEmployees?: SortOrderInput | SortOrder
    marginalizedEmployees?: SortOrderInput | SortOrder
    partTimeFreelancers?: SortOrderInput | SortOrder
    avgSalary?: SortOrderInput | SortOrder
    incomeSource?: SortOrderInput | SortOrder
    avgIncome?: SortOrderInput | SortOrder
    avgExpense?: SortOrderInput | SortOrder
    loanProvider?: SortOrderInput | SortOrder
    loanAmount?: SortOrderInput | SortOrder
    loanDuration?: SortOrderInput | SortOrder
    expansionPlans?: SortOrderInput | SortOrder
    mainChallenges?: SortOrderInput | SortOrder
    municipalSupport?: SortOrderInput | SortOrder
    communityContribution?: SortOrderInput | SortOrder
    additionalSupport?: SortOrderInput | SortOrder
    formFilledDate?: SortOrderInput | SortOrder
    finalRemarks?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    _count?: BusinessCountOrderByAggregateInput
    _avg?: BusinessAvgOrderByAggregateInput
    _max?: BusinessMaxOrderByAggregateInput
    _min?: BusinessMinOrderByAggregateInput
    _sum?: BusinessSumOrderByAggregateInput
  }

  export type BusinessScalarWhereWithAggregatesInput = {
    AND?: BusinessScalarWhereWithAggregatesInput | BusinessScalarWhereWithAggregatesInput[]
    OR?: BusinessScalarWhereWithAggregatesInput[]
    NOT?: BusinessScalarWhereWithAggregatesInput | BusinessScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Business"> | string
    businessName?: StringWithAggregatesFilter<"Business"> | string
    contactPerson?: StringWithAggregatesFilter<"Business"> | string
    position?: StringNullableWithAggregatesFilter<"Business"> | string | null
    businessAddress?: StringWithAggregatesFilter<"Business"> | string
    contactNumber?: StringWithAggregatesFilter<"Business"> | string
    email?: StringNullableWithAggregatesFilter<"Business"> | string | null
    tole?: StringNullableWithAggregatesFilter<"Business"> | string | null
    wardNumber?: IntWithAggregatesFilter<"Business"> | number
    municipality?: StringNullableWithAggregatesFilter<"Business"> | string | null
    establishmentYear?: StringNullableWithAggregatesFilter<"Business"> | string | null
    ownershipType?: StringNullableWithAggregatesFilter<"Business"> | string | null
    businessType?: StringNullableWithAggregatesFilter<"Business"> | string | null
    businessField?: StringNullableWithAggregatesFilter<"Business"> | string | null
    totalInvestment?: FloatNullableWithAggregatesFilter<"Business"> | number | null
    locationOwnership?: StringNullableWithAggregatesFilter<"Business"> | string | null
    annualTurnover?: FloatNullableWithAggregatesFilter<"Business"> | number | null
    registrationNumber?: StringNullableWithAggregatesFilter<"Business"> | string | null
    vatNumber?: StringNullableWithAggregatesFilter<"Business"> | string | null
    laborPermit?: StringNullableWithAggregatesFilter<"Business"> | string | null
    panNumber?: StringNullableWithAggregatesFilter<"Business"> | string | null
    environmentApproval?: StringNullableWithAggregatesFilter<"Business"> | string | null
    otherPermits?: StringNullableWithAggregatesFilter<"Business"> | string | null
    permanentEmployees?: IntNullableWithAggregatesFilter<"Business"> | number | null
    femaleEmployees?: IntNullableWithAggregatesFilter<"Business"> | number | null
    temporaryContractEmployees?: IntNullableWithAggregatesFilter<"Business"> | number | null
    marginalizedEmployees?: IntNullableWithAggregatesFilter<"Business"> | number | null
    partTimeFreelancers?: IntNullableWithAggregatesFilter<"Business"> | number | null
    avgSalary?: FloatNullableWithAggregatesFilter<"Business"> | number | null
    incomeSource?: StringNullableWithAggregatesFilter<"Business"> | string | null
    avgIncome?: FloatNullableWithAggregatesFilter<"Business"> | number | null
    avgExpense?: FloatNullableWithAggregatesFilter<"Business"> | number | null
    loanProvider?: StringNullableWithAggregatesFilter<"Business"> | string | null
    loanAmount?: FloatNullableWithAggregatesFilter<"Business"> | number | null
    loanDuration?: StringNullableWithAggregatesFilter<"Business"> | string | null
    expansionPlans?: StringNullableWithAggregatesFilter<"Business"> | string | null
    mainChallenges?: StringNullableWithAggregatesFilter<"Business"> | string | null
    municipalSupport?: StringNullableWithAggregatesFilter<"Business"> | string | null
    communityContribution?: StringNullableWithAggregatesFilter<"Business"> | string | null
    additionalSupport?: StringNullableWithAggregatesFilter<"Business"> | string | null
    formFilledDate?: StringNullableWithAggregatesFilter<"Business"> | string | null
    finalRemarks?: StringNullableWithAggregatesFilter<"Business"> | string | null
    isActive?: BoolWithAggregatesFilter<"Business"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Business"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Business"> | Date | string
    categoryId?: StringNullableWithAggregatesFilter<"Business"> | string | null
    createdById?: StringWithAggregatesFilter<"Business"> | string
  }

  export type BusinessDocumentWhereInput = {
    AND?: BusinessDocumentWhereInput | BusinessDocumentWhereInput[]
    OR?: BusinessDocumentWhereInput[]
    NOT?: BusinessDocumentWhereInput | BusinessDocumentWhereInput[]
    id?: StringFilter<"BusinessDocument"> | string
    originalName?: StringFilter<"BusinessDocument"> | string
    fileName?: StringFilter<"BusinessDocument"> | string
    filePath?: StringFilter<"BusinessDocument"> | string
    fileSize?: IntFilter<"BusinessDocument"> | number
    mimeType?: StringFilter<"BusinessDocument"> | string
    uploadedAt?: DateTimeFilter<"BusinessDocument"> | Date | string
    businessId?: StringFilter<"BusinessDocument"> | string
    business?: XOR<BusinessScalarRelationFilter, BusinessWhereInput>
  }

  export type BusinessDocumentOrderByWithRelationInput = {
    id?: SortOrder
    originalName?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
    businessId?: SortOrder
    business?: BusinessOrderByWithRelationInput
  }

  export type BusinessDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BusinessDocumentWhereInput | BusinessDocumentWhereInput[]
    OR?: BusinessDocumentWhereInput[]
    NOT?: BusinessDocumentWhereInput | BusinessDocumentWhereInput[]
    originalName?: StringFilter<"BusinessDocument"> | string
    fileName?: StringFilter<"BusinessDocument"> | string
    filePath?: StringFilter<"BusinessDocument"> | string
    fileSize?: IntFilter<"BusinessDocument"> | number
    mimeType?: StringFilter<"BusinessDocument"> | string
    uploadedAt?: DateTimeFilter<"BusinessDocument"> | Date | string
    businessId?: StringFilter<"BusinessDocument"> | string
    business?: XOR<BusinessScalarRelationFilter, BusinessWhereInput>
  }, "id">

  export type BusinessDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    originalName?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
    businessId?: SortOrder
    _count?: BusinessDocumentCountOrderByAggregateInput
    _avg?: BusinessDocumentAvgOrderByAggregateInput
    _max?: BusinessDocumentMaxOrderByAggregateInput
    _min?: BusinessDocumentMinOrderByAggregateInput
    _sum?: BusinessDocumentSumOrderByAggregateInput
  }

  export type BusinessDocumentScalarWhereWithAggregatesInput = {
    AND?: BusinessDocumentScalarWhereWithAggregatesInput | BusinessDocumentScalarWhereWithAggregatesInput[]
    OR?: BusinessDocumentScalarWhereWithAggregatesInput[]
    NOT?: BusinessDocumentScalarWhereWithAggregatesInput | BusinessDocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BusinessDocument"> | string
    originalName?: StringWithAggregatesFilter<"BusinessDocument"> | string
    fileName?: StringWithAggregatesFilter<"BusinessDocument"> | string
    filePath?: StringWithAggregatesFilter<"BusinessDocument"> | string
    fileSize?: IntWithAggregatesFilter<"BusinessDocument"> | number
    mimeType?: StringWithAggregatesFilter<"BusinessDocument"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"BusinessDocument"> | Date | string
    businessId?: StringWithAggregatesFilter<"BusinessDocument"> | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    tableName?: StringFilter<"AuditLog"> | string
    recordId?: StringFilter<"AuditLog"> | string
    oldData?: StringNullableFilter<"AuditLog"> | string | null
    newData?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    userId?: StringFilter<"AuditLog"> | string
    businessId?: StringNullableFilter<"AuditLog"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    business?: XOR<BusinessNullableScalarRelationFilter, BusinessWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    oldData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
    businessId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    business?: BusinessOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    action?: StringFilter<"AuditLog"> | string
    tableName?: StringFilter<"AuditLog"> | string
    recordId?: StringFilter<"AuditLog"> | string
    oldData?: StringNullableFilter<"AuditLog"> | string | null
    newData?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    userId?: StringFilter<"AuditLog"> | string
    businessId?: StringNullableFilter<"AuditLog"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    business?: XOR<BusinessNullableScalarRelationFilter, BusinessWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    oldData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
    businessId?: SortOrderInput | SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    tableName?: StringWithAggregatesFilter<"AuditLog"> | string
    recordId?: StringWithAggregatesFilter<"AuditLog"> | string
    oldData?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    newData?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
    userId?: StringWithAggregatesFilter<"AuditLog"> | string
    businessId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    username: string
    email?: string | null
    password: string
    role?: $Enums.UserRole
    fullName?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    businesses?: BusinessCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    email?: string | null
    password: string
    role?: $Enums.UserRole
    fullName?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    businesses?: BusinessUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businesses?: BusinessUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businesses?: BusinessUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    email?: string | null
    password: string
    role?: $Enums.UserRole
    fullName?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    nameEnglish?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    businesses?: BusinessCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    nameEnglish?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    businesses?: BusinessUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameEnglish?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businesses?: BusinessUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameEnglish?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businesses?: BusinessUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    nameEnglish?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameEnglish?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameEnglish?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessCreateInput = {
    id?: string
    businessName: string
    contactPerson: string
    position?: string | null
    businessAddress: string
    contactNumber: string
    email?: string | null
    tole?: string | null
    wardNumber: number
    municipality?: string | null
    establishmentYear?: string | null
    ownershipType?: string | null
    businessType?: string | null
    businessField?: string | null
    totalInvestment?: number | null
    locationOwnership?: string | null
    annualTurnover?: number | null
    registrationNumber?: string | null
    vatNumber?: string | null
    laborPermit?: string | null
    panNumber?: string | null
    environmentApproval?: string | null
    otherPermits?: string | null
    permanentEmployees?: number | null
    femaleEmployees?: number | null
    temporaryContractEmployees?: number | null
    marginalizedEmployees?: number | null
    partTimeFreelancers?: number | null
    avgSalary?: number | null
    incomeSource?: string | null
    avgIncome?: number | null
    avgExpense?: number | null
    loanProvider?: string | null
    loanAmount?: number | null
    loanDuration?: string | null
    expansionPlans?: string | null
    mainChallenges?: string | null
    municipalSupport?: string | null
    communityContribution?: string | null
    additionalSupport?: string | null
    formFilledDate?: string | null
    finalRemarks?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: CategoryCreateNestedOneWithoutBusinessesInput
    createdBy: UserCreateNestedOneWithoutBusinessesInput
    documents?: BusinessDocumentCreateNestedManyWithoutBusinessInput
    auditLogs?: AuditLogCreateNestedManyWithoutBusinessInput
  }

  export type BusinessUncheckedCreateInput = {
    id?: string
    businessName: string
    contactPerson: string
    position?: string | null
    businessAddress: string
    contactNumber: string
    email?: string | null
    tole?: string | null
    wardNumber: number
    municipality?: string | null
    establishmentYear?: string | null
    ownershipType?: string | null
    businessType?: string | null
    businessField?: string | null
    totalInvestment?: number | null
    locationOwnership?: string | null
    annualTurnover?: number | null
    registrationNumber?: string | null
    vatNumber?: string | null
    laborPermit?: string | null
    panNumber?: string | null
    environmentApproval?: string | null
    otherPermits?: string | null
    permanentEmployees?: number | null
    femaleEmployees?: number | null
    temporaryContractEmployees?: number | null
    marginalizedEmployees?: number | null
    partTimeFreelancers?: number | null
    avgSalary?: number | null
    incomeSource?: string | null
    avgIncome?: number | null
    avgExpense?: number | null
    loanProvider?: string | null
    loanAmount?: number | null
    loanDuration?: string | null
    expansionPlans?: string | null
    mainChallenges?: string | null
    municipalSupport?: string | null
    communityContribution?: string | null
    additionalSupport?: string | null
    formFilledDate?: string | null
    finalRemarks?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId?: string | null
    createdById: string
    documents?: BusinessDocumentUncheckedCreateNestedManyWithoutBusinessInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutBusinessInput
  }

  export type BusinessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    businessAddress?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tole?: NullableStringFieldUpdateOperationsInput | string | null
    wardNumber?: IntFieldUpdateOperationsInput | number
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    establishmentYear?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: NullableStringFieldUpdateOperationsInput | string | null
    businessField?: NullableStringFieldUpdateOperationsInput | string | null
    totalInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    locationOwnership?: NullableStringFieldUpdateOperationsInput | string | null
    annualTurnover?: NullableFloatFieldUpdateOperationsInput | number | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    laborPermit?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    environmentApproval?: NullableStringFieldUpdateOperationsInput | string | null
    otherPermits?: NullableStringFieldUpdateOperationsInput | string | null
    permanentEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    femaleEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    temporaryContractEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    marginalizedEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    partTimeFreelancers?: NullableIntFieldUpdateOperationsInput | number | null
    avgSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    avgIncome?: NullableFloatFieldUpdateOperationsInput | number | null
    avgExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    loanProvider?: NullableStringFieldUpdateOperationsInput | string | null
    loanAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    loanDuration?: NullableStringFieldUpdateOperationsInput | string | null
    expansionPlans?: NullableStringFieldUpdateOperationsInput | string | null
    mainChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    municipalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    communityContribution?: NullableStringFieldUpdateOperationsInput | string | null
    additionalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    formFilledDate?: NullableStringFieldUpdateOperationsInput | string | null
    finalRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutBusinessesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutBusinessesNestedInput
    documents?: BusinessDocumentUpdateManyWithoutBusinessNestedInput
    auditLogs?: AuditLogUpdateManyWithoutBusinessNestedInput
  }

  export type BusinessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    businessAddress?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tole?: NullableStringFieldUpdateOperationsInput | string | null
    wardNumber?: IntFieldUpdateOperationsInput | number
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    establishmentYear?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: NullableStringFieldUpdateOperationsInput | string | null
    businessField?: NullableStringFieldUpdateOperationsInput | string | null
    totalInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    locationOwnership?: NullableStringFieldUpdateOperationsInput | string | null
    annualTurnover?: NullableFloatFieldUpdateOperationsInput | number | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    laborPermit?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    environmentApproval?: NullableStringFieldUpdateOperationsInput | string | null
    otherPermits?: NullableStringFieldUpdateOperationsInput | string | null
    permanentEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    femaleEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    temporaryContractEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    marginalizedEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    partTimeFreelancers?: NullableIntFieldUpdateOperationsInput | number | null
    avgSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    avgIncome?: NullableFloatFieldUpdateOperationsInput | number | null
    avgExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    loanProvider?: NullableStringFieldUpdateOperationsInput | string | null
    loanAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    loanDuration?: NullableStringFieldUpdateOperationsInput | string | null
    expansionPlans?: NullableStringFieldUpdateOperationsInput | string | null
    mainChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    municipalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    communityContribution?: NullableStringFieldUpdateOperationsInput | string | null
    additionalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    formFilledDate?: NullableStringFieldUpdateOperationsInput | string | null
    finalRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    documents?: BusinessDocumentUncheckedUpdateManyWithoutBusinessNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutBusinessNestedInput
  }

  export type BusinessCreateManyInput = {
    id?: string
    businessName: string
    contactPerson: string
    position?: string | null
    businessAddress: string
    contactNumber: string
    email?: string | null
    tole?: string | null
    wardNumber: number
    municipality?: string | null
    establishmentYear?: string | null
    ownershipType?: string | null
    businessType?: string | null
    businessField?: string | null
    totalInvestment?: number | null
    locationOwnership?: string | null
    annualTurnover?: number | null
    registrationNumber?: string | null
    vatNumber?: string | null
    laborPermit?: string | null
    panNumber?: string | null
    environmentApproval?: string | null
    otherPermits?: string | null
    permanentEmployees?: number | null
    femaleEmployees?: number | null
    temporaryContractEmployees?: number | null
    marginalizedEmployees?: number | null
    partTimeFreelancers?: number | null
    avgSalary?: number | null
    incomeSource?: string | null
    avgIncome?: number | null
    avgExpense?: number | null
    loanProvider?: string | null
    loanAmount?: number | null
    loanDuration?: string | null
    expansionPlans?: string | null
    mainChallenges?: string | null
    municipalSupport?: string | null
    communityContribution?: string | null
    additionalSupport?: string | null
    formFilledDate?: string | null
    finalRemarks?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId?: string | null
    createdById: string
  }

  export type BusinessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    businessAddress?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tole?: NullableStringFieldUpdateOperationsInput | string | null
    wardNumber?: IntFieldUpdateOperationsInput | number
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    establishmentYear?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: NullableStringFieldUpdateOperationsInput | string | null
    businessField?: NullableStringFieldUpdateOperationsInput | string | null
    totalInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    locationOwnership?: NullableStringFieldUpdateOperationsInput | string | null
    annualTurnover?: NullableFloatFieldUpdateOperationsInput | number | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    laborPermit?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    environmentApproval?: NullableStringFieldUpdateOperationsInput | string | null
    otherPermits?: NullableStringFieldUpdateOperationsInput | string | null
    permanentEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    femaleEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    temporaryContractEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    marginalizedEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    partTimeFreelancers?: NullableIntFieldUpdateOperationsInput | number | null
    avgSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    avgIncome?: NullableFloatFieldUpdateOperationsInput | number | null
    avgExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    loanProvider?: NullableStringFieldUpdateOperationsInput | string | null
    loanAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    loanDuration?: NullableStringFieldUpdateOperationsInput | string | null
    expansionPlans?: NullableStringFieldUpdateOperationsInput | string | null
    mainChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    municipalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    communityContribution?: NullableStringFieldUpdateOperationsInput | string | null
    additionalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    formFilledDate?: NullableStringFieldUpdateOperationsInput | string | null
    finalRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    businessAddress?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tole?: NullableStringFieldUpdateOperationsInput | string | null
    wardNumber?: IntFieldUpdateOperationsInput | number
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    establishmentYear?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: NullableStringFieldUpdateOperationsInput | string | null
    businessField?: NullableStringFieldUpdateOperationsInput | string | null
    totalInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    locationOwnership?: NullableStringFieldUpdateOperationsInput | string | null
    annualTurnover?: NullableFloatFieldUpdateOperationsInput | number | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    laborPermit?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    environmentApproval?: NullableStringFieldUpdateOperationsInput | string | null
    otherPermits?: NullableStringFieldUpdateOperationsInput | string | null
    permanentEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    femaleEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    temporaryContractEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    marginalizedEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    partTimeFreelancers?: NullableIntFieldUpdateOperationsInput | number | null
    avgSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    avgIncome?: NullableFloatFieldUpdateOperationsInput | number | null
    avgExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    loanProvider?: NullableStringFieldUpdateOperationsInput | string | null
    loanAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    loanDuration?: NullableStringFieldUpdateOperationsInput | string | null
    expansionPlans?: NullableStringFieldUpdateOperationsInput | string | null
    mainChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    municipalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    communityContribution?: NullableStringFieldUpdateOperationsInput | string | null
    additionalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    formFilledDate?: NullableStringFieldUpdateOperationsInput | string | null
    finalRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type BusinessDocumentCreateInput = {
    id?: string
    originalName: string
    fileName: string
    filePath: string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
    business: BusinessCreateNestedOneWithoutDocumentsInput
  }

  export type BusinessDocumentUncheckedCreateInput = {
    id?: string
    originalName: string
    fileName: string
    filePath: string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
    businessId: string
  }

  export type BusinessDocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    business?: BusinessUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type BusinessDocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessId?: StringFieldUpdateOperationsInput | string
  }

  export type BusinessDocumentCreateManyInput = {
    id?: string
    originalName: string
    fileName: string
    filePath: string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
    businessId: string
  }

  export type BusinessDocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessDocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    tableName: string
    recordId: string
    oldData?: string | null
    newData?: string | null
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
    business?: BusinessCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    action: string
    tableName: string
    recordId: string
    oldData?: string | null
    newData?: string | null
    timestamp?: Date | string
    userId: string
    businessId?: string | null
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
    business?: BusinessUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    businessId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogCreateManyInput = {
    id?: string
    action: string
    tableName: string
    recordId: string
    oldData?: string | null
    newData?: string | null
    timestamp?: Date | string
    userId: string
    businessId?: string | null
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    businessId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BusinessListRelationFilter = {
    every?: BusinessWhereInput
    some?: BusinessWhereInput
    none?: BusinessWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BusinessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    fullName?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    fullName?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    fullName?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nameEnglish?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nameEnglish?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nameEnglish?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CategoryNullableScalarRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type BusinessDocumentListRelationFilter = {
    every?: BusinessDocumentWhereInput
    some?: BusinessDocumentWhereInput
    none?: BusinessDocumentWhereInput
  }

  export type BusinessDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BusinessCountOrderByAggregateInput = {
    id?: SortOrder
    businessName?: SortOrder
    contactPerson?: SortOrder
    position?: SortOrder
    businessAddress?: SortOrder
    contactNumber?: SortOrder
    email?: SortOrder
    tole?: SortOrder
    wardNumber?: SortOrder
    municipality?: SortOrder
    establishmentYear?: SortOrder
    ownershipType?: SortOrder
    businessType?: SortOrder
    businessField?: SortOrder
    totalInvestment?: SortOrder
    locationOwnership?: SortOrder
    annualTurnover?: SortOrder
    registrationNumber?: SortOrder
    vatNumber?: SortOrder
    laborPermit?: SortOrder
    panNumber?: SortOrder
    environmentApproval?: SortOrder
    otherPermits?: SortOrder
    permanentEmployees?: SortOrder
    femaleEmployees?: SortOrder
    temporaryContractEmployees?: SortOrder
    marginalizedEmployees?: SortOrder
    partTimeFreelancers?: SortOrder
    avgSalary?: SortOrder
    incomeSource?: SortOrder
    avgIncome?: SortOrder
    avgExpense?: SortOrder
    loanProvider?: SortOrder
    loanAmount?: SortOrder
    loanDuration?: SortOrder
    expansionPlans?: SortOrder
    mainChallenges?: SortOrder
    municipalSupport?: SortOrder
    communityContribution?: SortOrder
    additionalSupport?: SortOrder
    formFilledDate?: SortOrder
    finalRemarks?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
    createdById?: SortOrder
  }

  export type BusinessAvgOrderByAggregateInput = {
    wardNumber?: SortOrder
    totalInvestment?: SortOrder
    annualTurnover?: SortOrder
    permanentEmployees?: SortOrder
    femaleEmployees?: SortOrder
    temporaryContractEmployees?: SortOrder
    marginalizedEmployees?: SortOrder
    partTimeFreelancers?: SortOrder
    avgSalary?: SortOrder
    avgIncome?: SortOrder
    avgExpense?: SortOrder
    loanAmount?: SortOrder
  }

  export type BusinessMaxOrderByAggregateInput = {
    id?: SortOrder
    businessName?: SortOrder
    contactPerson?: SortOrder
    position?: SortOrder
    businessAddress?: SortOrder
    contactNumber?: SortOrder
    email?: SortOrder
    tole?: SortOrder
    wardNumber?: SortOrder
    municipality?: SortOrder
    establishmentYear?: SortOrder
    ownershipType?: SortOrder
    businessType?: SortOrder
    businessField?: SortOrder
    totalInvestment?: SortOrder
    locationOwnership?: SortOrder
    annualTurnover?: SortOrder
    registrationNumber?: SortOrder
    vatNumber?: SortOrder
    laborPermit?: SortOrder
    panNumber?: SortOrder
    environmentApproval?: SortOrder
    otherPermits?: SortOrder
    permanentEmployees?: SortOrder
    femaleEmployees?: SortOrder
    temporaryContractEmployees?: SortOrder
    marginalizedEmployees?: SortOrder
    partTimeFreelancers?: SortOrder
    avgSalary?: SortOrder
    incomeSource?: SortOrder
    avgIncome?: SortOrder
    avgExpense?: SortOrder
    loanProvider?: SortOrder
    loanAmount?: SortOrder
    loanDuration?: SortOrder
    expansionPlans?: SortOrder
    mainChallenges?: SortOrder
    municipalSupport?: SortOrder
    communityContribution?: SortOrder
    additionalSupport?: SortOrder
    formFilledDate?: SortOrder
    finalRemarks?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
    createdById?: SortOrder
  }

  export type BusinessMinOrderByAggregateInput = {
    id?: SortOrder
    businessName?: SortOrder
    contactPerson?: SortOrder
    position?: SortOrder
    businessAddress?: SortOrder
    contactNumber?: SortOrder
    email?: SortOrder
    tole?: SortOrder
    wardNumber?: SortOrder
    municipality?: SortOrder
    establishmentYear?: SortOrder
    ownershipType?: SortOrder
    businessType?: SortOrder
    businessField?: SortOrder
    totalInvestment?: SortOrder
    locationOwnership?: SortOrder
    annualTurnover?: SortOrder
    registrationNumber?: SortOrder
    vatNumber?: SortOrder
    laborPermit?: SortOrder
    panNumber?: SortOrder
    environmentApproval?: SortOrder
    otherPermits?: SortOrder
    permanentEmployees?: SortOrder
    femaleEmployees?: SortOrder
    temporaryContractEmployees?: SortOrder
    marginalizedEmployees?: SortOrder
    partTimeFreelancers?: SortOrder
    avgSalary?: SortOrder
    incomeSource?: SortOrder
    avgIncome?: SortOrder
    avgExpense?: SortOrder
    loanProvider?: SortOrder
    loanAmount?: SortOrder
    loanDuration?: SortOrder
    expansionPlans?: SortOrder
    mainChallenges?: SortOrder
    municipalSupport?: SortOrder
    communityContribution?: SortOrder
    additionalSupport?: SortOrder
    formFilledDate?: SortOrder
    finalRemarks?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryId?: SortOrder
    createdById?: SortOrder
  }

  export type BusinessSumOrderByAggregateInput = {
    wardNumber?: SortOrder
    totalInvestment?: SortOrder
    annualTurnover?: SortOrder
    permanentEmployees?: SortOrder
    femaleEmployees?: SortOrder
    temporaryContractEmployees?: SortOrder
    marginalizedEmployees?: SortOrder
    partTimeFreelancers?: SortOrder
    avgSalary?: SortOrder
    avgIncome?: SortOrder
    avgExpense?: SortOrder
    loanAmount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BusinessScalarRelationFilter = {
    is?: BusinessWhereInput
    isNot?: BusinessWhereInput
  }

  export type BusinessDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    originalName?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
    businessId?: SortOrder
  }

  export type BusinessDocumentAvgOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type BusinessDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    originalName?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
    businessId?: SortOrder
  }

  export type BusinessDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    originalName?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    uploadedAt?: SortOrder
    businessId?: SortOrder
  }

  export type BusinessDocumentSumOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type BusinessNullableScalarRelationFilter = {
    is?: BusinessWhereInput | null
    isNot?: BusinessWhereInput | null
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
    businessId?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
    businessId?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
    businessId?: SortOrder
  }

  export type BusinessCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<BusinessCreateWithoutCreatedByInput, BusinessUncheckedCreateWithoutCreatedByInput> | BusinessCreateWithoutCreatedByInput[] | BusinessUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BusinessCreateOrConnectWithoutCreatedByInput | BusinessCreateOrConnectWithoutCreatedByInput[]
    createMany?: BusinessCreateManyCreatedByInputEnvelope
    connect?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type BusinessUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<BusinessCreateWithoutCreatedByInput, BusinessUncheckedCreateWithoutCreatedByInput> | BusinessCreateWithoutCreatedByInput[] | BusinessUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BusinessCreateOrConnectWithoutCreatedByInput | BusinessCreateOrConnectWithoutCreatedByInput[]
    createMany?: BusinessCreateManyCreatedByInputEnvelope
    connect?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BusinessUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<BusinessCreateWithoutCreatedByInput, BusinessUncheckedCreateWithoutCreatedByInput> | BusinessCreateWithoutCreatedByInput[] | BusinessUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BusinessCreateOrConnectWithoutCreatedByInput | BusinessCreateOrConnectWithoutCreatedByInput[]
    upsert?: BusinessUpsertWithWhereUniqueWithoutCreatedByInput | BusinessUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: BusinessCreateManyCreatedByInputEnvelope
    set?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
    disconnect?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
    delete?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
    connect?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
    update?: BusinessUpdateWithWhereUniqueWithoutCreatedByInput | BusinessUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: BusinessUpdateManyWithWhereWithoutCreatedByInput | BusinessUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: BusinessScalarWhereInput | BusinessScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type BusinessUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<BusinessCreateWithoutCreatedByInput, BusinessUncheckedCreateWithoutCreatedByInput> | BusinessCreateWithoutCreatedByInput[] | BusinessUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BusinessCreateOrConnectWithoutCreatedByInput | BusinessCreateOrConnectWithoutCreatedByInput[]
    upsert?: BusinessUpsertWithWhereUniqueWithoutCreatedByInput | BusinessUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: BusinessCreateManyCreatedByInputEnvelope
    set?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
    disconnect?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
    delete?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
    connect?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
    update?: BusinessUpdateWithWhereUniqueWithoutCreatedByInput | BusinessUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: BusinessUpdateManyWithWhereWithoutCreatedByInput | BusinessUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: BusinessScalarWhereInput | BusinessScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type BusinessCreateNestedManyWithoutCategoryInput = {
    create?: XOR<BusinessCreateWithoutCategoryInput, BusinessUncheckedCreateWithoutCategoryInput> | BusinessCreateWithoutCategoryInput[] | BusinessUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: BusinessCreateOrConnectWithoutCategoryInput | BusinessCreateOrConnectWithoutCategoryInput[]
    createMany?: BusinessCreateManyCategoryInputEnvelope
    connect?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
  }

  export type BusinessUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<BusinessCreateWithoutCategoryInput, BusinessUncheckedCreateWithoutCategoryInput> | BusinessCreateWithoutCategoryInput[] | BusinessUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: BusinessCreateOrConnectWithoutCategoryInput | BusinessCreateOrConnectWithoutCategoryInput[]
    createMany?: BusinessCreateManyCategoryInputEnvelope
    connect?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
  }

  export type BusinessUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<BusinessCreateWithoutCategoryInput, BusinessUncheckedCreateWithoutCategoryInput> | BusinessCreateWithoutCategoryInput[] | BusinessUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: BusinessCreateOrConnectWithoutCategoryInput | BusinessCreateOrConnectWithoutCategoryInput[]
    upsert?: BusinessUpsertWithWhereUniqueWithoutCategoryInput | BusinessUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: BusinessCreateManyCategoryInputEnvelope
    set?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
    disconnect?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
    delete?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
    connect?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
    update?: BusinessUpdateWithWhereUniqueWithoutCategoryInput | BusinessUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: BusinessUpdateManyWithWhereWithoutCategoryInput | BusinessUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: BusinessScalarWhereInput | BusinessScalarWhereInput[]
  }

  export type BusinessUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<BusinessCreateWithoutCategoryInput, BusinessUncheckedCreateWithoutCategoryInput> | BusinessCreateWithoutCategoryInput[] | BusinessUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: BusinessCreateOrConnectWithoutCategoryInput | BusinessCreateOrConnectWithoutCategoryInput[]
    upsert?: BusinessUpsertWithWhereUniqueWithoutCategoryInput | BusinessUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: BusinessCreateManyCategoryInputEnvelope
    set?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
    disconnect?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
    delete?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
    connect?: BusinessWhereUniqueInput | BusinessWhereUniqueInput[]
    update?: BusinessUpdateWithWhereUniqueWithoutCategoryInput | BusinessUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: BusinessUpdateManyWithWhereWithoutCategoryInput | BusinessUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: BusinessScalarWhereInput | BusinessScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutBusinessesInput = {
    create?: XOR<CategoryCreateWithoutBusinessesInput, CategoryUncheckedCreateWithoutBusinessesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutBusinessesInput
    connect?: CategoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBusinessesInput = {
    create?: XOR<UserCreateWithoutBusinessesInput, UserUncheckedCreateWithoutBusinessesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBusinessesInput
    connect?: UserWhereUniqueInput
  }

  export type BusinessDocumentCreateNestedManyWithoutBusinessInput = {
    create?: XOR<BusinessDocumentCreateWithoutBusinessInput, BusinessDocumentUncheckedCreateWithoutBusinessInput> | BusinessDocumentCreateWithoutBusinessInput[] | BusinessDocumentUncheckedCreateWithoutBusinessInput[]
    connectOrCreate?: BusinessDocumentCreateOrConnectWithoutBusinessInput | BusinessDocumentCreateOrConnectWithoutBusinessInput[]
    createMany?: BusinessDocumentCreateManyBusinessInputEnvelope
    connect?: BusinessDocumentWhereUniqueInput | BusinessDocumentWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutBusinessInput = {
    create?: XOR<AuditLogCreateWithoutBusinessInput, AuditLogUncheckedCreateWithoutBusinessInput> | AuditLogCreateWithoutBusinessInput[] | AuditLogUncheckedCreateWithoutBusinessInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutBusinessInput | AuditLogCreateOrConnectWithoutBusinessInput[]
    createMany?: AuditLogCreateManyBusinessInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type BusinessDocumentUncheckedCreateNestedManyWithoutBusinessInput = {
    create?: XOR<BusinessDocumentCreateWithoutBusinessInput, BusinessDocumentUncheckedCreateWithoutBusinessInput> | BusinessDocumentCreateWithoutBusinessInput[] | BusinessDocumentUncheckedCreateWithoutBusinessInput[]
    connectOrCreate?: BusinessDocumentCreateOrConnectWithoutBusinessInput | BusinessDocumentCreateOrConnectWithoutBusinessInput[]
    createMany?: BusinessDocumentCreateManyBusinessInputEnvelope
    connect?: BusinessDocumentWhereUniqueInput | BusinessDocumentWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutBusinessInput = {
    create?: XOR<AuditLogCreateWithoutBusinessInput, AuditLogUncheckedCreateWithoutBusinessInput> | AuditLogCreateWithoutBusinessInput[] | AuditLogUncheckedCreateWithoutBusinessInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutBusinessInput | AuditLogCreateOrConnectWithoutBusinessInput[]
    createMany?: AuditLogCreateManyBusinessInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoryUpdateOneWithoutBusinessesNestedInput = {
    create?: XOR<CategoryCreateWithoutBusinessesInput, CategoryUncheckedCreateWithoutBusinessesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutBusinessesInput
    upsert?: CategoryUpsertWithoutBusinessesInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutBusinessesInput, CategoryUpdateWithoutBusinessesInput>, CategoryUncheckedUpdateWithoutBusinessesInput>
  }

  export type UserUpdateOneRequiredWithoutBusinessesNestedInput = {
    create?: XOR<UserCreateWithoutBusinessesInput, UserUncheckedCreateWithoutBusinessesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBusinessesInput
    upsert?: UserUpsertWithoutBusinessesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBusinessesInput, UserUpdateWithoutBusinessesInput>, UserUncheckedUpdateWithoutBusinessesInput>
  }

  export type BusinessDocumentUpdateManyWithoutBusinessNestedInput = {
    create?: XOR<BusinessDocumentCreateWithoutBusinessInput, BusinessDocumentUncheckedCreateWithoutBusinessInput> | BusinessDocumentCreateWithoutBusinessInput[] | BusinessDocumentUncheckedCreateWithoutBusinessInput[]
    connectOrCreate?: BusinessDocumentCreateOrConnectWithoutBusinessInput | BusinessDocumentCreateOrConnectWithoutBusinessInput[]
    upsert?: BusinessDocumentUpsertWithWhereUniqueWithoutBusinessInput | BusinessDocumentUpsertWithWhereUniqueWithoutBusinessInput[]
    createMany?: BusinessDocumentCreateManyBusinessInputEnvelope
    set?: BusinessDocumentWhereUniqueInput | BusinessDocumentWhereUniqueInput[]
    disconnect?: BusinessDocumentWhereUniqueInput | BusinessDocumentWhereUniqueInput[]
    delete?: BusinessDocumentWhereUniqueInput | BusinessDocumentWhereUniqueInput[]
    connect?: BusinessDocumentWhereUniqueInput | BusinessDocumentWhereUniqueInput[]
    update?: BusinessDocumentUpdateWithWhereUniqueWithoutBusinessInput | BusinessDocumentUpdateWithWhereUniqueWithoutBusinessInput[]
    updateMany?: BusinessDocumentUpdateManyWithWhereWithoutBusinessInput | BusinessDocumentUpdateManyWithWhereWithoutBusinessInput[]
    deleteMany?: BusinessDocumentScalarWhereInput | BusinessDocumentScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutBusinessNestedInput = {
    create?: XOR<AuditLogCreateWithoutBusinessInput, AuditLogUncheckedCreateWithoutBusinessInput> | AuditLogCreateWithoutBusinessInput[] | AuditLogUncheckedCreateWithoutBusinessInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutBusinessInput | AuditLogCreateOrConnectWithoutBusinessInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutBusinessInput | AuditLogUpsertWithWhereUniqueWithoutBusinessInput[]
    createMany?: AuditLogCreateManyBusinessInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutBusinessInput | AuditLogUpdateWithWhereUniqueWithoutBusinessInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutBusinessInput | AuditLogUpdateManyWithWhereWithoutBusinessInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type BusinessDocumentUncheckedUpdateManyWithoutBusinessNestedInput = {
    create?: XOR<BusinessDocumentCreateWithoutBusinessInput, BusinessDocumentUncheckedCreateWithoutBusinessInput> | BusinessDocumentCreateWithoutBusinessInput[] | BusinessDocumentUncheckedCreateWithoutBusinessInput[]
    connectOrCreate?: BusinessDocumentCreateOrConnectWithoutBusinessInput | BusinessDocumentCreateOrConnectWithoutBusinessInput[]
    upsert?: BusinessDocumentUpsertWithWhereUniqueWithoutBusinessInput | BusinessDocumentUpsertWithWhereUniqueWithoutBusinessInput[]
    createMany?: BusinessDocumentCreateManyBusinessInputEnvelope
    set?: BusinessDocumentWhereUniqueInput | BusinessDocumentWhereUniqueInput[]
    disconnect?: BusinessDocumentWhereUniqueInput | BusinessDocumentWhereUniqueInput[]
    delete?: BusinessDocumentWhereUniqueInput | BusinessDocumentWhereUniqueInput[]
    connect?: BusinessDocumentWhereUniqueInput | BusinessDocumentWhereUniqueInput[]
    update?: BusinessDocumentUpdateWithWhereUniqueWithoutBusinessInput | BusinessDocumentUpdateWithWhereUniqueWithoutBusinessInput[]
    updateMany?: BusinessDocumentUpdateManyWithWhereWithoutBusinessInput | BusinessDocumentUpdateManyWithWhereWithoutBusinessInput[]
    deleteMany?: BusinessDocumentScalarWhereInput | BusinessDocumentScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutBusinessNestedInput = {
    create?: XOR<AuditLogCreateWithoutBusinessInput, AuditLogUncheckedCreateWithoutBusinessInput> | AuditLogCreateWithoutBusinessInput[] | AuditLogUncheckedCreateWithoutBusinessInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutBusinessInput | AuditLogCreateOrConnectWithoutBusinessInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutBusinessInput | AuditLogUpsertWithWhereUniqueWithoutBusinessInput[]
    createMany?: AuditLogCreateManyBusinessInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutBusinessInput | AuditLogUpdateWithWhereUniqueWithoutBusinessInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutBusinessInput | AuditLogUpdateManyWithWhereWithoutBusinessInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type BusinessCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<BusinessCreateWithoutDocumentsInput, BusinessUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: BusinessCreateOrConnectWithoutDocumentsInput
    connect?: BusinessWhereUniqueInput
  }

  export type BusinessUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<BusinessCreateWithoutDocumentsInput, BusinessUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: BusinessCreateOrConnectWithoutDocumentsInput
    upsert?: BusinessUpsertWithoutDocumentsInput
    connect?: BusinessWhereUniqueInput
    update?: XOR<XOR<BusinessUpdateToOneWithWhereWithoutDocumentsInput, BusinessUpdateWithoutDocumentsInput>, BusinessUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type BusinessCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<BusinessCreateWithoutAuditLogsInput, BusinessUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: BusinessCreateOrConnectWithoutAuditLogsInput
    connect?: BusinessWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type BusinessUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<BusinessCreateWithoutAuditLogsInput, BusinessUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: BusinessCreateOrConnectWithoutAuditLogsInput
    upsert?: BusinessUpsertWithoutAuditLogsInput
    disconnect?: BusinessWhereInput | boolean
    delete?: BusinessWhereInput | boolean
    connect?: BusinessWhereUniqueInput
    update?: XOR<XOR<BusinessUpdateToOneWithWhereWithoutAuditLogsInput, BusinessUpdateWithoutAuditLogsInput>, BusinessUncheckedUpdateWithoutAuditLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BusinessCreateWithoutCreatedByInput = {
    id?: string
    businessName: string
    contactPerson: string
    position?: string | null
    businessAddress: string
    contactNumber: string
    email?: string | null
    tole?: string | null
    wardNumber: number
    municipality?: string | null
    establishmentYear?: string | null
    ownershipType?: string | null
    businessType?: string | null
    businessField?: string | null
    totalInvestment?: number | null
    locationOwnership?: string | null
    annualTurnover?: number | null
    registrationNumber?: string | null
    vatNumber?: string | null
    laborPermit?: string | null
    panNumber?: string | null
    environmentApproval?: string | null
    otherPermits?: string | null
    permanentEmployees?: number | null
    femaleEmployees?: number | null
    temporaryContractEmployees?: number | null
    marginalizedEmployees?: number | null
    partTimeFreelancers?: number | null
    avgSalary?: number | null
    incomeSource?: string | null
    avgIncome?: number | null
    avgExpense?: number | null
    loanProvider?: string | null
    loanAmount?: number | null
    loanDuration?: string | null
    expansionPlans?: string | null
    mainChallenges?: string | null
    municipalSupport?: string | null
    communityContribution?: string | null
    additionalSupport?: string | null
    formFilledDate?: string | null
    finalRemarks?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: CategoryCreateNestedOneWithoutBusinessesInput
    documents?: BusinessDocumentCreateNestedManyWithoutBusinessInput
    auditLogs?: AuditLogCreateNestedManyWithoutBusinessInput
  }

  export type BusinessUncheckedCreateWithoutCreatedByInput = {
    id?: string
    businessName: string
    contactPerson: string
    position?: string | null
    businessAddress: string
    contactNumber: string
    email?: string | null
    tole?: string | null
    wardNumber: number
    municipality?: string | null
    establishmentYear?: string | null
    ownershipType?: string | null
    businessType?: string | null
    businessField?: string | null
    totalInvestment?: number | null
    locationOwnership?: string | null
    annualTurnover?: number | null
    registrationNumber?: string | null
    vatNumber?: string | null
    laborPermit?: string | null
    panNumber?: string | null
    environmentApproval?: string | null
    otherPermits?: string | null
    permanentEmployees?: number | null
    femaleEmployees?: number | null
    temporaryContractEmployees?: number | null
    marginalizedEmployees?: number | null
    partTimeFreelancers?: number | null
    avgSalary?: number | null
    incomeSource?: string | null
    avgIncome?: number | null
    avgExpense?: number | null
    loanProvider?: string | null
    loanAmount?: number | null
    loanDuration?: string | null
    expansionPlans?: string | null
    mainChallenges?: string | null
    municipalSupport?: string | null
    communityContribution?: string | null
    additionalSupport?: string | null
    formFilledDate?: string | null
    finalRemarks?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId?: string | null
    documents?: BusinessDocumentUncheckedCreateNestedManyWithoutBusinessInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutBusinessInput
  }

  export type BusinessCreateOrConnectWithoutCreatedByInput = {
    where: BusinessWhereUniqueInput
    create: XOR<BusinessCreateWithoutCreatedByInput, BusinessUncheckedCreateWithoutCreatedByInput>
  }

  export type BusinessCreateManyCreatedByInputEnvelope = {
    data: BusinessCreateManyCreatedByInput | BusinessCreateManyCreatedByInput[]
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    tableName: string
    recordId: string
    oldData?: string | null
    newData?: string | null
    timestamp?: Date | string
    business?: BusinessCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    tableName: string
    recordId: string
    oldData?: string | null
    newData?: string | null
    timestamp?: Date | string
    businessId?: string | null
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
  }

  export type BusinessUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: BusinessWhereUniqueInput
    update: XOR<BusinessUpdateWithoutCreatedByInput, BusinessUncheckedUpdateWithoutCreatedByInput>
    create: XOR<BusinessCreateWithoutCreatedByInput, BusinessUncheckedCreateWithoutCreatedByInput>
  }

  export type BusinessUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: BusinessWhereUniqueInput
    data: XOR<BusinessUpdateWithoutCreatedByInput, BusinessUncheckedUpdateWithoutCreatedByInput>
  }

  export type BusinessUpdateManyWithWhereWithoutCreatedByInput = {
    where: BusinessScalarWhereInput
    data: XOR<BusinessUpdateManyMutationInput, BusinessUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type BusinessScalarWhereInput = {
    AND?: BusinessScalarWhereInput | BusinessScalarWhereInput[]
    OR?: BusinessScalarWhereInput[]
    NOT?: BusinessScalarWhereInput | BusinessScalarWhereInput[]
    id?: StringFilter<"Business"> | string
    businessName?: StringFilter<"Business"> | string
    contactPerson?: StringFilter<"Business"> | string
    position?: StringNullableFilter<"Business"> | string | null
    businessAddress?: StringFilter<"Business"> | string
    contactNumber?: StringFilter<"Business"> | string
    email?: StringNullableFilter<"Business"> | string | null
    tole?: StringNullableFilter<"Business"> | string | null
    wardNumber?: IntFilter<"Business"> | number
    municipality?: StringNullableFilter<"Business"> | string | null
    establishmentYear?: StringNullableFilter<"Business"> | string | null
    ownershipType?: StringNullableFilter<"Business"> | string | null
    businessType?: StringNullableFilter<"Business"> | string | null
    businessField?: StringNullableFilter<"Business"> | string | null
    totalInvestment?: FloatNullableFilter<"Business"> | number | null
    locationOwnership?: StringNullableFilter<"Business"> | string | null
    annualTurnover?: FloatNullableFilter<"Business"> | number | null
    registrationNumber?: StringNullableFilter<"Business"> | string | null
    vatNumber?: StringNullableFilter<"Business"> | string | null
    laborPermit?: StringNullableFilter<"Business"> | string | null
    panNumber?: StringNullableFilter<"Business"> | string | null
    environmentApproval?: StringNullableFilter<"Business"> | string | null
    otherPermits?: StringNullableFilter<"Business"> | string | null
    permanentEmployees?: IntNullableFilter<"Business"> | number | null
    femaleEmployees?: IntNullableFilter<"Business"> | number | null
    temporaryContractEmployees?: IntNullableFilter<"Business"> | number | null
    marginalizedEmployees?: IntNullableFilter<"Business"> | number | null
    partTimeFreelancers?: IntNullableFilter<"Business"> | number | null
    avgSalary?: FloatNullableFilter<"Business"> | number | null
    incomeSource?: StringNullableFilter<"Business"> | string | null
    avgIncome?: FloatNullableFilter<"Business"> | number | null
    avgExpense?: FloatNullableFilter<"Business"> | number | null
    loanProvider?: StringNullableFilter<"Business"> | string | null
    loanAmount?: FloatNullableFilter<"Business"> | number | null
    loanDuration?: StringNullableFilter<"Business"> | string | null
    expansionPlans?: StringNullableFilter<"Business"> | string | null
    mainChallenges?: StringNullableFilter<"Business"> | string | null
    municipalSupport?: StringNullableFilter<"Business"> | string | null
    communityContribution?: StringNullableFilter<"Business"> | string | null
    additionalSupport?: StringNullableFilter<"Business"> | string | null
    formFilledDate?: StringNullableFilter<"Business"> | string | null
    finalRemarks?: StringNullableFilter<"Business"> | string | null
    isActive?: BoolFilter<"Business"> | boolean
    createdAt?: DateTimeFilter<"Business"> | Date | string
    updatedAt?: DateTimeFilter<"Business"> | Date | string
    categoryId?: StringNullableFilter<"Business"> | string | null
    createdById?: StringFilter<"Business"> | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    tableName?: StringFilter<"AuditLog"> | string
    recordId?: StringFilter<"AuditLog"> | string
    oldData?: StringNullableFilter<"AuditLog"> | string | null
    newData?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    userId?: StringFilter<"AuditLog"> | string
    businessId?: StringNullableFilter<"AuditLog"> | string | null
  }

  export type BusinessCreateWithoutCategoryInput = {
    id?: string
    businessName: string
    contactPerson: string
    position?: string | null
    businessAddress: string
    contactNumber: string
    email?: string | null
    tole?: string | null
    wardNumber: number
    municipality?: string | null
    establishmentYear?: string | null
    ownershipType?: string | null
    businessType?: string | null
    businessField?: string | null
    totalInvestment?: number | null
    locationOwnership?: string | null
    annualTurnover?: number | null
    registrationNumber?: string | null
    vatNumber?: string | null
    laborPermit?: string | null
    panNumber?: string | null
    environmentApproval?: string | null
    otherPermits?: string | null
    permanentEmployees?: number | null
    femaleEmployees?: number | null
    temporaryContractEmployees?: number | null
    marginalizedEmployees?: number | null
    partTimeFreelancers?: number | null
    avgSalary?: number | null
    incomeSource?: string | null
    avgIncome?: number | null
    avgExpense?: number | null
    loanProvider?: string | null
    loanAmount?: number | null
    loanDuration?: string | null
    expansionPlans?: string | null
    mainChallenges?: string | null
    municipalSupport?: string | null
    communityContribution?: string | null
    additionalSupport?: string | null
    formFilledDate?: string | null
    finalRemarks?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutBusinessesInput
    documents?: BusinessDocumentCreateNestedManyWithoutBusinessInput
    auditLogs?: AuditLogCreateNestedManyWithoutBusinessInput
  }

  export type BusinessUncheckedCreateWithoutCategoryInput = {
    id?: string
    businessName: string
    contactPerson: string
    position?: string | null
    businessAddress: string
    contactNumber: string
    email?: string | null
    tole?: string | null
    wardNumber: number
    municipality?: string | null
    establishmentYear?: string | null
    ownershipType?: string | null
    businessType?: string | null
    businessField?: string | null
    totalInvestment?: number | null
    locationOwnership?: string | null
    annualTurnover?: number | null
    registrationNumber?: string | null
    vatNumber?: string | null
    laborPermit?: string | null
    panNumber?: string | null
    environmentApproval?: string | null
    otherPermits?: string | null
    permanentEmployees?: number | null
    femaleEmployees?: number | null
    temporaryContractEmployees?: number | null
    marginalizedEmployees?: number | null
    partTimeFreelancers?: number | null
    avgSalary?: number | null
    incomeSource?: string | null
    avgIncome?: number | null
    avgExpense?: number | null
    loanProvider?: string | null
    loanAmount?: number | null
    loanDuration?: string | null
    expansionPlans?: string | null
    mainChallenges?: string | null
    municipalSupport?: string | null
    communityContribution?: string | null
    additionalSupport?: string | null
    formFilledDate?: string | null
    finalRemarks?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    documents?: BusinessDocumentUncheckedCreateNestedManyWithoutBusinessInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutBusinessInput
  }

  export type BusinessCreateOrConnectWithoutCategoryInput = {
    where: BusinessWhereUniqueInput
    create: XOR<BusinessCreateWithoutCategoryInput, BusinessUncheckedCreateWithoutCategoryInput>
  }

  export type BusinessCreateManyCategoryInputEnvelope = {
    data: BusinessCreateManyCategoryInput | BusinessCreateManyCategoryInput[]
  }

  export type BusinessUpsertWithWhereUniqueWithoutCategoryInput = {
    where: BusinessWhereUniqueInput
    update: XOR<BusinessUpdateWithoutCategoryInput, BusinessUncheckedUpdateWithoutCategoryInput>
    create: XOR<BusinessCreateWithoutCategoryInput, BusinessUncheckedCreateWithoutCategoryInput>
  }

  export type BusinessUpdateWithWhereUniqueWithoutCategoryInput = {
    where: BusinessWhereUniqueInput
    data: XOR<BusinessUpdateWithoutCategoryInput, BusinessUncheckedUpdateWithoutCategoryInput>
  }

  export type BusinessUpdateManyWithWhereWithoutCategoryInput = {
    where: BusinessScalarWhereInput
    data: XOR<BusinessUpdateManyMutationInput, BusinessUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CategoryCreateWithoutBusinessesInput = {
    id?: string
    name: string
    nameEnglish?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUncheckedCreateWithoutBusinessesInput = {
    id?: string
    name: string
    nameEnglish?: string | null
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryCreateOrConnectWithoutBusinessesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutBusinessesInput, CategoryUncheckedCreateWithoutBusinessesInput>
  }

  export type UserCreateWithoutBusinessesInput = {
    id?: string
    username: string
    email?: string | null
    password: string
    role?: $Enums.UserRole
    fullName?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBusinessesInput = {
    id?: string
    username: string
    email?: string | null
    password: string
    role?: $Enums.UserRole
    fullName?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBusinessesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBusinessesInput, UserUncheckedCreateWithoutBusinessesInput>
  }

  export type BusinessDocumentCreateWithoutBusinessInput = {
    id?: string
    originalName: string
    fileName: string
    filePath: string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
  }

  export type BusinessDocumentUncheckedCreateWithoutBusinessInput = {
    id?: string
    originalName: string
    fileName: string
    filePath: string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
  }

  export type BusinessDocumentCreateOrConnectWithoutBusinessInput = {
    where: BusinessDocumentWhereUniqueInput
    create: XOR<BusinessDocumentCreateWithoutBusinessInput, BusinessDocumentUncheckedCreateWithoutBusinessInput>
  }

  export type BusinessDocumentCreateManyBusinessInputEnvelope = {
    data: BusinessDocumentCreateManyBusinessInput | BusinessDocumentCreateManyBusinessInput[]
  }

  export type AuditLogCreateWithoutBusinessInput = {
    id?: string
    action: string
    tableName: string
    recordId: string
    oldData?: string | null
    newData?: string | null
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutBusinessInput = {
    id?: string
    action: string
    tableName: string
    recordId: string
    oldData?: string | null
    newData?: string | null
    timestamp?: Date | string
    userId: string
  }

  export type AuditLogCreateOrConnectWithoutBusinessInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutBusinessInput, AuditLogUncheckedCreateWithoutBusinessInput>
  }

  export type AuditLogCreateManyBusinessInputEnvelope = {
    data: AuditLogCreateManyBusinessInput | AuditLogCreateManyBusinessInput[]
  }

  export type CategoryUpsertWithoutBusinessesInput = {
    update: XOR<CategoryUpdateWithoutBusinessesInput, CategoryUncheckedUpdateWithoutBusinessesInput>
    create: XOR<CategoryCreateWithoutBusinessesInput, CategoryUncheckedCreateWithoutBusinessesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutBusinessesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutBusinessesInput, CategoryUncheckedUpdateWithoutBusinessesInput>
  }

  export type CategoryUpdateWithoutBusinessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameEnglish?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateWithoutBusinessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameEnglish?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutBusinessesInput = {
    update: XOR<UserUpdateWithoutBusinessesInput, UserUncheckedUpdateWithoutBusinessesInput>
    create: XOR<UserCreateWithoutBusinessesInput, UserUncheckedCreateWithoutBusinessesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBusinessesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBusinessesInput, UserUncheckedUpdateWithoutBusinessesInput>
  }

  export type UserUpdateWithoutBusinessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBusinessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BusinessDocumentUpsertWithWhereUniqueWithoutBusinessInput = {
    where: BusinessDocumentWhereUniqueInput
    update: XOR<BusinessDocumentUpdateWithoutBusinessInput, BusinessDocumentUncheckedUpdateWithoutBusinessInput>
    create: XOR<BusinessDocumentCreateWithoutBusinessInput, BusinessDocumentUncheckedCreateWithoutBusinessInput>
  }

  export type BusinessDocumentUpdateWithWhereUniqueWithoutBusinessInput = {
    where: BusinessDocumentWhereUniqueInput
    data: XOR<BusinessDocumentUpdateWithoutBusinessInput, BusinessDocumentUncheckedUpdateWithoutBusinessInput>
  }

  export type BusinessDocumentUpdateManyWithWhereWithoutBusinessInput = {
    where: BusinessDocumentScalarWhereInput
    data: XOR<BusinessDocumentUpdateManyMutationInput, BusinessDocumentUncheckedUpdateManyWithoutBusinessInput>
  }

  export type BusinessDocumentScalarWhereInput = {
    AND?: BusinessDocumentScalarWhereInput | BusinessDocumentScalarWhereInput[]
    OR?: BusinessDocumentScalarWhereInput[]
    NOT?: BusinessDocumentScalarWhereInput | BusinessDocumentScalarWhereInput[]
    id?: StringFilter<"BusinessDocument"> | string
    originalName?: StringFilter<"BusinessDocument"> | string
    fileName?: StringFilter<"BusinessDocument"> | string
    filePath?: StringFilter<"BusinessDocument"> | string
    fileSize?: IntFilter<"BusinessDocument"> | number
    mimeType?: StringFilter<"BusinessDocument"> | string
    uploadedAt?: DateTimeFilter<"BusinessDocument"> | Date | string
    businessId?: StringFilter<"BusinessDocument"> | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutBusinessInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutBusinessInput, AuditLogUncheckedUpdateWithoutBusinessInput>
    create: XOR<AuditLogCreateWithoutBusinessInput, AuditLogUncheckedCreateWithoutBusinessInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutBusinessInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutBusinessInput, AuditLogUncheckedUpdateWithoutBusinessInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutBusinessInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutBusinessInput>
  }

  export type BusinessCreateWithoutDocumentsInput = {
    id?: string
    businessName: string
    contactPerson: string
    position?: string | null
    businessAddress: string
    contactNumber: string
    email?: string | null
    tole?: string | null
    wardNumber: number
    municipality?: string | null
    establishmentYear?: string | null
    ownershipType?: string | null
    businessType?: string | null
    businessField?: string | null
    totalInvestment?: number | null
    locationOwnership?: string | null
    annualTurnover?: number | null
    registrationNumber?: string | null
    vatNumber?: string | null
    laborPermit?: string | null
    panNumber?: string | null
    environmentApproval?: string | null
    otherPermits?: string | null
    permanentEmployees?: number | null
    femaleEmployees?: number | null
    temporaryContractEmployees?: number | null
    marginalizedEmployees?: number | null
    partTimeFreelancers?: number | null
    avgSalary?: number | null
    incomeSource?: string | null
    avgIncome?: number | null
    avgExpense?: number | null
    loanProvider?: string | null
    loanAmount?: number | null
    loanDuration?: string | null
    expansionPlans?: string | null
    mainChallenges?: string | null
    municipalSupport?: string | null
    communityContribution?: string | null
    additionalSupport?: string | null
    formFilledDate?: string | null
    finalRemarks?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: CategoryCreateNestedOneWithoutBusinessesInput
    createdBy: UserCreateNestedOneWithoutBusinessesInput
    auditLogs?: AuditLogCreateNestedManyWithoutBusinessInput
  }

  export type BusinessUncheckedCreateWithoutDocumentsInput = {
    id?: string
    businessName: string
    contactPerson: string
    position?: string | null
    businessAddress: string
    contactNumber: string
    email?: string | null
    tole?: string | null
    wardNumber: number
    municipality?: string | null
    establishmentYear?: string | null
    ownershipType?: string | null
    businessType?: string | null
    businessField?: string | null
    totalInvestment?: number | null
    locationOwnership?: string | null
    annualTurnover?: number | null
    registrationNumber?: string | null
    vatNumber?: string | null
    laborPermit?: string | null
    panNumber?: string | null
    environmentApproval?: string | null
    otherPermits?: string | null
    permanentEmployees?: number | null
    femaleEmployees?: number | null
    temporaryContractEmployees?: number | null
    marginalizedEmployees?: number | null
    partTimeFreelancers?: number | null
    avgSalary?: number | null
    incomeSource?: string | null
    avgIncome?: number | null
    avgExpense?: number | null
    loanProvider?: string | null
    loanAmount?: number | null
    loanDuration?: string | null
    expansionPlans?: string | null
    mainChallenges?: string | null
    municipalSupport?: string | null
    communityContribution?: string | null
    additionalSupport?: string | null
    formFilledDate?: string | null
    finalRemarks?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId?: string | null
    createdById: string
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutBusinessInput
  }

  export type BusinessCreateOrConnectWithoutDocumentsInput = {
    where: BusinessWhereUniqueInput
    create: XOR<BusinessCreateWithoutDocumentsInput, BusinessUncheckedCreateWithoutDocumentsInput>
  }

  export type BusinessUpsertWithoutDocumentsInput = {
    update: XOR<BusinessUpdateWithoutDocumentsInput, BusinessUncheckedUpdateWithoutDocumentsInput>
    create: XOR<BusinessCreateWithoutDocumentsInput, BusinessUncheckedCreateWithoutDocumentsInput>
    where?: BusinessWhereInput
  }

  export type BusinessUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: BusinessWhereInput
    data: XOR<BusinessUpdateWithoutDocumentsInput, BusinessUncheckedUpdateWithoutDocumentsInput>
  }

  export type BusinessUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    businessAddress?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tole?: NullableStringFieldUpdateOperationsInput | string | null
    wardNumber?: IntFieldUpdateOperationsInput | number
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    establishmentYear?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: NullableStringFieldUpdateOperationsInput | string | null
    businessField?: NullableStringFieldUpdateOperationsInput | string | null
    totalInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    locationOwnership?: NullableStringFieldUpdateOperationsInput | string | null
    annualTurnover?: NullableFloatFieldUpdateOperationsInput | number | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    laborPermit?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    environmentApproval?: NullableStringFieldUpdateOperationsInput | string | null
    otherPermits?: NullableStringFieldUpdateOperationsInput | string | null
    permanentEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    femaleEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    temporaryContractEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    marginalizedEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    partTimeFreelancers?: NullableIntFieldUpdateOperationsInput | number | null
    avgSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    avgIncome?: NullableFloatFieldUpdateOperationsInput | number | null
    avgExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    loanProvider?: NullableStringFieldUpdateOperationsInput | string | null
    loanAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    loanDuration?: NullableStringFieldUpdateOperationsInput | string | null
    expansionPlans?: NullableStringFieldUpdateOperationsInput | string | null
    mainChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    municipalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    communityContribution?: NullableStringFieldUpdateOperationsInput | string | null
    additionalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    formFilledDate?: NullableStringFieldUpdateOperationsInput | string | null
    finalRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutBusinessesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutBusinessesNestedInput
    auditLogs?: AuditLogUpdateManyWithoutBusinessNestedInput
  }

  export type BusinessUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    businessAddress?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tole?: NullableStringFieldUpdateOperationsInput | string | null
    wardNumber?: IntFieldUpdateOperationsInput | number
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    establishmentYear?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: NullableStringFieldUpdateOperationsInput | string | null
    businessField?: NullableStringFieldUpdateOperationsInput | string | null
    totalInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    locationOwnership?: NullableStringFieldUpdateOperationsInput | string | null
    annualTurnover?: NullableFloatFieldUpdateOperationsInput | number | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    laborPermit?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    environmentApproval?: NullableStringFieldUpdateOperationsInput | string | null
    otherPermits?: NullableStringFieldUpdateOperationsInput | string | null
    permanentEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    femaleEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    temporaryContractEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    marginalizedEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    partTimeFreelancers?: NullableIntFieldUpdateOperationsInput | number | null
    avgSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    avgIncome?: NullableFloatFieldUpdateOperationsInput | number | null
    avgExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    loanProvider?: NullableStringFieldUpdateOperationsInput | string | null
    loanAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    loanDuration?: NullableStringFieldUpdateOperationsInput | string | null
    expansionPlans?: NullableStringFieldUpdateOperationsInput | string | null
    mainChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    municipalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    communityContribution?: NullableStringFieldUpdateOperationsInput | string | null
    additionalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    formFilledDate?: NullableStringFieldUpdateOperationsInput | string | null
    finalRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    auditLogs?: AuditLogUncheckedUpdateManyWithoutBusinessNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    username: string
    email?: string | null
    password: string
    role?: $Enums.UserRole
    fullName?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    businesses?: BusinessCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    username: string
    email?: string | null
    password: string
    role?: $Enums.UserRole
    fullName?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    businesses?: BusinessUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type BusinessCreateWithoutAuditLogsInput = {
    id?: string
    businessName: string
    contactPerson: string
    position?: string | null
    businessAddress: string
    contactNumber: string
    email?: string | null
    tole?: string | null
    wardNumber: number
    municipality?: string | null
    establishmentYear?: string | null
    ownershipType?: string | null
    businessType?: string | null
    businessField?: string | null
    totalInvestment?: number | null
    locationOwnership?: string | null
    annualTurnover?: number | null
    registrationNumber?: string | null
    vatNumber?: string | null
    laborPermit?: string | null
    panNumber?: string | null
    environmentApproval?: string | null
    otherPermits?: string | null
    permanentEmployees?: number | null
    femaleEmployees?: number | null
    temporaryContractEmployees?: number | null
    marginalizedEmployees?: number | null
    partTimeFreelancers?: number | null
    avgSalary?: number | null
    incomeSource?: string | null
    avgIncome?: number | null
    avgExpense?: number | null
    loanProvider?: string | null
    loanAmount?: number | null
    loanDuration?: string | null
    expansionPlans?: string | null
    mainChallenges?: string | null
    municipalSupport?: string | null
    communityContribution?: string | null
    additionalSupport?: string | null
    formFilledDate?: string | null
    finalRemarks?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: CategoryCreateNestedOneWithoutBusinessesInput
    createdBy: UserCreateNestedOneWithoutBusinessesInput
    documents?: BusinessDocumentCreateNestedManyWithoutBusinessInput
  }

  export type BusinessUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    businessName: string
    contactPerson: string
    position?: string | null
    businessAddress: string
    contactNumber: string
    email?: string | null
    tole?: string | null
    wardNumber: number
    municipality?: string | null
    establishmentYear?: string | null
    ownershipType?: string | null
    businessType?: string | null
    businessField?: string | null
    totalInvestment?: number | null
    locationOwnership?: string | null
    annualTurnover?: number | null
    registrationNumber?: string | null
    vatNumber?: string | null
    laborPermit?: string | null
    panNumber?: string | null
    environmentApproval?: string | null
    otherPermits?: string | null
    permanentEmployees?: number | null
    femaleEmployees?: number | null
    temporaryContractEmployees?: number | null
    marginalizedEmployees?: number | null
    partTimeFreelancers?: number | null
    avgSalary?: number | null
    incomeSource?: string | null
    avgIncome?: number | null
    avgExpense?: number | null
    loanProvider?: string | null
    loanAmount?: number | null
    loanDuration?: string | null
    expansionPlans?: string | null
    mainChallenges?: string | null
    municipalSupport?: string | null
    communityContribution?: string | null
    additionalSupport?: string | null
    formFilledDate?: string | null
    finalRemarks?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId?: string | null
    createdById: string
    documents?: BusinessDocumentUncheckedCreateNestedManyWithoutBusinessInput
  }

  export type BusinessCreateOrConnectWithoutAuditLogsInput = {
    where: BusinessWhereUniqueInput
    create: XOR<BusinessCreateWithoutAuditLogsInput, BusinessUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businesses?: BusinessUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businesses?: BusinessUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type BusinessUpsertWithoutAuditLogsInput = {
    update: XOR<BusinessUpdateWithoutAuditLogsInput, BusinessUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<BusinessCreateWithoutAuditLogsInput, BusinessUncheckedCreateWithoutAuditLogsInput>
    where?: BusinessWhereInput
  }

  export type BusinessUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: BusinessWhereInput
    data: XOR<BusinessUpdateWithoutAuditLogsInput, BusinessUncheckedUpdateWithoutAuditLogsInput>
  }

  export type BusinessUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    businessAddress?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tole?: NullableStringFieldUpdateOperationsInput | string | null
    wardNumber?: IntFieldUpdateOperationsInput | number
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    establishmentYear?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: NullableStringFieldUpdateOperationsInput | string | null
    businessField?: NullableStringFieldUpdateOperationsInput | string | null
    totalInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    locationOwnership?: NullableStringFieldUpdateOperationsInput | string | null
    annualTurnover?: NullableFloatFieldUpdateOperationsInput | number | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    laborPermit?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    environmentApproval?: NullableStringFieldUpdateOperationsInput | string | null
    otherPermits?: NullableStringFieldUpdateOperationsInput | string | null
    permanentEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    femaleEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    temporaryContractEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    marginalizedEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    partTimeFreelancers?: NullableIntFieldUpdateOperationsInput | number | null
    avgSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    avgIncome?: NullableFloatFieldUpdateOperationsInput | number | null
    avgExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    loanProvider?: NullableStringFieldUpdateOperationsInput | string | null
    loanAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    loanDuration?: NullableStringFieldUpdateOperationsInput | string | null
    expansionPlans?: NullableStringFieldUpdateOperationsInput | string | null
    mainChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    municipalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    communityContribution?: NullableStringFieldUpdateOperationsInput | string | null
    additionalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    formFilledDate?: NullableStringFieldUpdateOperationsInput | string | null
    finalRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutBusinessesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutBusinessesNestedInput
    documents?: BusinessDocumentUpdateManyWithoutBusinessNestedInput
  }

  export type BusinessUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    businessAddress?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tole?: NullableStringFieldUpdateOperationsInput | string | null
    wardNumber?: IntFieldUpdateOperationsInput | number
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    establishmentYear?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: NullableStringFieldUpdateOperationsInput | string | null
    businessField?: NullableStringFieldUpdateOperationsInput | string | null
    totalInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    locationOwnership?: NullableStringFieldUpdateOperationsInput | string | null
    annualTurnover?: NullableFloatFieldUpdateOperationsInput | number | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    laborPermit?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    environmentApproval?: NullableStringFieldUpdateOperationsInput | string | null
    otherPermits?: NullableStringFieldUpdateOperationsInput | string | null
    permanentEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    femaleEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    temporaryContractEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    marginalizedEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    partTimeFreelancers?: NullableIntFieldUpdateOperationsInput | number | null
    avgSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    avgIncome?: NullableFloatFieldUpdateOperationsInput | number | null
    avgExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    loanProvider?: NullableStringFieldUpdateOperationsInput | string | null
    loanAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    loanDuration?: NullableStringFieldUpdateOperationsInput | string | null
    expansionPlans?: NullableStringFieldUpdateOperationsInput | string | null
    mainChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    municipalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    communityContribution?: NullableStringFieldUpdateOperationsInput | string | null
    additionalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    formFilledDate?: NullableStringFieldUpdateOperationsInput | string | null
    finalRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    documents?: BusinessDocumentUncheckedUpdateManyWithoutBusinessNestedInput
  }

  export type BusinessCreateManyCreatedByInput = {
    id?: string
    businessName: string
    contactPerson: string
    position?: string | null
    businessAddress: string
    contactNumber: string
    email?: string | null
    tole?: string | null
    wardNumber: number
    municipality?: string | null
    establishmentYear?: string | null
    ownershipType?: string | null
    businessType?: string | null
    businessField?: string | null
    totalInvestment?: number | null
    locationOwnership?: string | null
    annualTurnover?: number | null
    registrationNumber?: string | null
    vatNumber?: string | null
    laborPermit?: string | null
    panNumber?: string | null
    environmentApproval?: string | null
    otherPermits?: string | null
    permanentEmployees?: number | null
    femaleEmployees?: number | null
    temporaryContractEmployees?: number | null
    marginalizedEmployees?: number | null
    partTimeFreelancers?: number | null
    avgSalary?: number | null
    incomeSource?: string | null
    avgIncome?: number | null
    avgExpense?: number | null
    loanProvider?: string | null
    loanAmount?: number | null
    loanDuration?: string | null
    expansionPlans?: string | null
    mainChallenges?: string | null
    municipalSupport?: string | null
    communityContribution?: string | null
    additionalSupport?: string | null
    formFilledDate?: string | null
    finalRemarks?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryId?: string | null
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    action: string
    tableName: string
    recordId: string
    oldData?: string | null
    newData?: string | null
    timestamp?: Date | string
    businessId?: string | null
  }

  export type BusinessUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    businessAddress?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tole?: NullableStringFieldUpdateOperationsInput | string | null
    wardNumber?: IntFieldUpdateOperationsInput | number
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    establishmentYear?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: NullableStringFieldUpdateOperationsInput | string | null
    businessField?: NullableStringFieldUpdateOperationsInput | string | null
    totalInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    locationOwnership?: NullableStringFieldUpdateOperationsInput | string | null
    annualTurnover?: NullableFloatFieldUpdateOperationsInput | number | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    laborPermit?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    environmentApproval?: NullableStringFieldUpdateOperationsInput | string | null
    otherPermits?: NullableStringFieldUpdateOperationsInput | string | null
    permanentEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    femaleEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    temporaryContractEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    marginalizedEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    partTimeFreelancers?: NullableIntFieldUpdateOperationsInput | number | null
    avgSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    avgIncome?: NullableFloatFieldUpdateOperationsInput | number | null
    avgExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    loanProvider?: NullableStringFieldUpdateOperationsInput | string | null
    loanAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    loanDuration?: NullableStringFieldUpdateOperationsInput | string | null
    expansionPlans?: NullableStringFieldUpdateOperationsInput | string | null
    mainChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    municipalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    communityContribution?: NullableStringFieldUpdateOperationsInput | string | null
    additionalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    formFilledDate?: NullableStringFieldUpdateOperationsInput | string | null
    finalRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneWithoutBusinessesNestedInput
    documents?: BusinessDocumentUpdateManyWithoutBusinessNestedInput
    auditLogs?: AuditLogUpdateManyWithoutBusinessNestedInput
  }

  export type BusinessUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    businessAddress?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tole?: NullableStringFieldUpdateOperationsInput | string | null
    wardNumber?: IntFieldUpdateOperationsInput | number
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    establishmentYear?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: NullableStringFieldUpdateOperationsInput | string | null
    businessField?: NullableStringFieldUpdateOperationsInput | string | null
    totalInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    locationOwnership?: NullableStringFieldUpdateOperationsInput | string | null
    annualTurnover?: NullableFloatFieldUpdateOperationsInput | number | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    laborPermit?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    environmentApproval?: NullableStringFieldUpdateOperationsInput | string | null
    otherPermits?: NullableStringFieldUpdateOperationsInput | string | null
    permanentEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    femaleEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    temporaryContractEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    marginalizedEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    partTimeFreelancers?: NullableIntFieldUpdateOperationsInput | number | null
    avgSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    avgIncome?: NullableFloatFieldUpdateOperationsInput | number | null
    avgExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    loanProvider?: NullableStringFieldUpdateOperationsInput | string | null
    loanAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    loanDuration?: NullableStringFieldUpdateOperationsInput | string | null
    expansionPlans?: NullableStringFieldUpdateOperationsInput | string | null
    mainChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    municipalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    communityContribution?: NullableStringFieldUpdateOperationsInput | string | null
    additionalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    formFilledDate?: NullableStringFieldUpdateOperationsInput | string | null
    finalRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: BusinessDocumentUncheckedUpdateManyWithoutBusinessNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutBusinessNestedInput
  }

  export type BusinessUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    businessAddress?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tole?: NullableStringFieldUpdateOperationsInput | string | null
    wardNumber?: IntFieldUpdateOperationsInput | number
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    establishmentYear?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: NullableStringFieldUpdateOperationsInput | string | null
    businessField?: NullableStringFieldUpdateOperationsInput | string | null
    totalInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    locationOwnership?: NullableStringFieldUpdateOperationsInput | string | null
    annualTurnover?: NullableFloatFieldUpdateOperationsInput | number | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    laborPermit?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    environmentApproval?: NullableStringFieldUpdateOperationsInput | string | null
    otherPermits?: NullableStringFieldUpdateOperationsInput | string | null
    permanentEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    femaleEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    temporaryContractEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    marginalizedEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    partTimeFreelancers?: NullableIntFieldUpdateOperationsInput | number | null
    avgSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    avgIncome?: NullableFloatFieldUpdateOperationsInput | number | null
    avgExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    loanProvider?: NullableStringFieldUpdateOperationsInput | string | null
    loanAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    loanDuration?: NullableStringFieldUpdateOperationsInput | string | null
    expansionPlans?: NullableStringFieldUpdateOperationsInput | string | null
    mainChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    municipalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    communityContribution?: NullableStringFieldUpdateOperationsInput | string | null
    additionalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    formFilledDate?: NullableStringFieldUpdateOperationsInput | string | null
    finalRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    business?: BusinessUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    businessId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    businessId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BusinessCreateManyCategoryInput = {
    id?: string
    businessName: string
    contactPerson: string
    position?: string | null
    businessAddress: string
    contactNumber: string
    email?: string | null
    tole?: string | null
    wardNumber: number
    municipality?: string | null
    establishmentYear?: string | null
    ownershipType?: string | null
    businessType?: string | null
    businessField?: string | null
    totalInvestment?: number | null
    locationOwnership?: string | null
    annualTurnover?: number | null
    registrationNumber?: string | null
    vatNumber?: string | null
    laborPermit?: string | null
    panNumber?: string | null
    environmentApproval?: string | null
    otherPermits?: string | null
    permanentEmployees?: number | null
    femaleEmployees?: number | null
    temporaryContractEmployees?: number | null
    marginalizedEmployees?: number | null
    partTimeFreelancers?: number | null
    avgSalary?: number | null
    incomeSource?: string | null
    avgIncome?: number | null
    avgExpense?: number | null
    loanProvider?: string | null
    loanAmount?: number | null
    loanDuration?: string | null
    expansionPlans?: string | null
    mainChallenges?: string | null
    municipalSupport?: string | null
    communityContribution?: string | null
    additionalSupport?: string | null
    formFilledDate?: string | null
    finalRemarks?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
  }

  export type BusinessUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    businessAddress?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tole?: NullableStringFieldUpdateOperationsInput | string | null
    wardNumber?: IntFieldUpdateOperationsInput | number
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    establishmentYear?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: NullableStringFieldUpdateOperationsInput | string | null
    businessField?: NullableStringFieldUpdateOperationsInput | string | null
    totalInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    locationOwnership?: NullableStringFieldUpdateOperationsInput | string | null
    annualTurnover?: NullableFloatFieldUpdateOperationsInput | number | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    laborPermit?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    environmentApproval?: NullableStringFieldUpdateOperationsInput | string | null
    otherPermits?: NullableStringFieldUpdateOperationsInput | string | null
    permanentEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    femaleEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    temporaryContractEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    marginalizedEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    partTimeFreelancers?: NullableIntFieldUpdateOperationsInput | number | null
    avgSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    avgIncome?: NullableFloatFieldUpdateOperationsInput | number | null
    avgExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    loanProvider?: NullableStringFieldUpdateOperationsInput | string | null
    loanAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    loanDuration?: NullableStringFieldUpdateOperationsInput | string | null
    expansionPlans?: NullableStringFieldUpdateOperationsInput | string | null
    mainChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    municipalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    communityContribution?: NullableStringFieldUpdateOperationsInput | string | null
    additionalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    formFilledDate?: NullableStringFieldUpdateOperationsInput | string | null
    finalRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutBusinessesNestedInput
    documents?: BusinessDocumentUpdateManyWithoutBusinessNestedInput
    auditLogs?: AuditLogUpdateManyWithoutBusinessNestedInput
  }

  export type BusinessUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    businessAddress?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tole?: NullableStringFieldUpdateOperationsInput | string | null
    wardNumber?: IntFieldUpdateOperationsInput | number
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    establishmentYear?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: NullableStringFieldUpdateOperationsInput | string | null
    businessField?: NullableStringFieldUpdateOperationsInput | string | null
    totalInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    locationOwnership?: NullableStringFieldUpdateOperationsInput | string | null
    annualTurnover?: NullableFloatFieldUpdateOperationsInput | number | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    laborPermit?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    environmentApproval?: NullableStringFieldUpdateOperationsInput | string | null
    otherPermits?: NullableStringFieldUpdateOperationsInput | string | null
    permanentEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    femaleEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    temporaryContractEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    marginalizedEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    partTimeFreelancers?: NullableIntFieldUpdateOperationsInput | number | null
    avgSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    avgIncome?: NullableFloatFieldUpdateOperationsInput | number | null
    avgExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    loanProvider?: NullableStringFieldUpdateOperationsInput | string | null
    loanAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    loanDuration?: NullableStringFieldUpdateOperationsInput | string | null
    expansionPlans?: NullableStringFieldUpdateOperationsInput | string | null
    mainChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    municipalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    communityContribution?: NullableStringFieldUpdateOperationsInput | string | null
    additionalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    formFilledDate?: NullableStringFieldUpdateOperationsInput | string | null
    finalRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    documents?: BusinessDocumentUncheckedUpdateManyWithoutBusinessNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutBusinessNestedInput
  }

  export type BusinessUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessName?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    businessAddress?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tole?: NullableStringFieldUpdateOperationsInput | string | null
    wardNumber?: IntFieldUpdateOperationsInput | number
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    establishmentYear?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: NullableStringFieldUpdateOperationsInput | string | null
    businessField?: NullableStringFieldUpdateOperationsInput | string | null
    totalInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    locationOwnership?: NullableStringFieldUpdateOperationsInput | string | null
    annualTurnover?: NullableFloatFieldUpdateOperationsInput | number | null
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    laborPermit?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    environmentApproval?: NullableStringFieldUpdateOperationsInput | string | null
    otherPermits?: NullableStringFieldUpdateOperationsInput | string | null
    permanentEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    femaleEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    temporaryContractEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    marginalizedEmployees?: NullableIntFieldUpdateOperationsInput | number | null
    partTimeFreelancers?: NullableIntFieldUpdateOperationsInput | number | null
    avgSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    avgIncome?: NullableFloatFieldUpdateOperationsInput | number | null
    avgExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    loanProvider?: NullableStringFieldUpdateOperationsInput | string | null
    loanAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    loanDuration?: NullableStringFieldUpdateOperationsInput | string | null
    expansionPlans?: NullableStringFieldUpdateOperationsInput | string | null
    mainChallenges?: NullableStringFieldUpdateOperationsInput | string | null
    municipalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    communityContribution?: NullableStringFieldUpdateOperationsInput | string | null
    additionalSupport?: NullableStringFieldUpdateOperationsInput | string | null
    formFilledDate?: NullableStringFieldUpdateOperationsInput | string | null
    finalRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type BusinessDocumentCreateManyBusinessInput = {
    id?: string
    originalName: string
    fileName: string
    filePath: string
    fileSize: number
    mimeType: string
    uploadedAt?: Date | string
  }

  export type AuditLogCreateManyBusinessInput = {
    id?: string
    action: string
    tableName: string
    recordId: string
    oldData?: string | null
    newData?: string | null
    timestamp?: Date | string
    userId: string
  }

  export type BusinessDocumentUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessDocumentUncheckedUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessDocumentUncheckedUpdateManyWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogUncheckedUpdateManyWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldData?: NullableStringFieldUpdateOperationsInput | string | null
    newData?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}